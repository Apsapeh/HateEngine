pub use self::types::*;
pub use self::enumerations::*;
pub use self::functions::*;

use std::os::raw::c_void;


#[derive(Copy, Clone)]
struct FnPtr {
    ptr: *const c_void,
    is_loaded: bool
}

#[allow(dead_code)]
impl FnPtr {
    fn new(ptr: *const c_void) -> FnPtr {
        if !ptr.is_null() {
            FnPtr { ptr, is_loaded: true }
        } else {
            FnPtr { ptr: FnPtr::not_initialized as *const c_void, is_loaded: false }
        }
    }

    fn set_ptr(&mut self, ptr: *const c_void) {
        *self = Self::new(ptr);
    }
    
    fn aliased(&mut self, other: *const FnPtr) {
        unsafe {
            if !self.is_loaded && (*other).is_loaded {
                *self = *other;
            }
        }
    }

    #[inline(never)]
    fn not_initialized() -> ! { panic!("gl: function not initialized") }
}

unsafe impl Sync for FnPtr {}
unsafe impl Send for FnPtr {}

pub mod types {
#![allow(dead_code, non_snake_case, non_camel_case_types)]

use std::os::raw;

pub type GLvoid = raw::c_void;

pub type GLbyte = raw::c_char;
pub type GLubyte = raw::c_uchar;
pub type GLchar = raw::c_char;
pub type GLboolean = raw::c_uchar;

pub type GLshort = raw::c_short;
pub type GLushort = raw::c_ushort;

pub type GLint = raw::c_int;
pub type GLuint = raw::c_uint;
pub type GLint64 = i64;
pub type GLuint64 = u64;

pub type GLintptr = isize;
pub type GLsizeiptr = isize;
pub type GLintptrARB = isize;
pub type GLsizeiptrARB = isize;
pub type GLint64EXT = i64;
pub type GLuint64EXT = u64;

pub type GLsizei = GLint;
pub type GLclampx = raw::c_int;
pub type GLfixed = GLint;
pub type GLhalf = raw::c_ushort;
pub type GLhalfNV = raw::c_ushort;
pub type GLhalfARB = raw::c_ushort;

pub type GLenum = raw::c_uint;
pub type GLbitfield = raw::c_uint;

pub type GLfloat = raw::c_float;
pub type GLdouble = raw::c_double;
pub type GLclampf = raw::c_float;
pub type GLclampd = raw::c_double;

pub type GLcharARB = raw::c_char;

#[cfg(target_os = "macos")]
pub type GLhandleARB = *const raw::c_void;
#[cfg(not(target_os = "macos"))]
pub type GLhandleARB = raw::c_uint;

pub enum __GLsync {}

pub type GLsync = *const __GLsync;

pub enum _cl_context {}

pub enum _cl_event {}

pub type GLvdpauSurfaceNV = GLintptr;
pub type GLeglClientBufferEXT = *const raw::c_void;
pub type GLeglImageOES = *const raw::c_void;


pub type GLDEBUGPROC = extern "system" fn (
    source: GLenum,
    type_: GLenum,
    id: GLuint,
    severity: GLenum,
    length: GLsizei,
    message: *const GLchar,
    userParam: *mut raw::c_void,
);
pub type GLDEBUGPROCARB = extern "system" fn (
    source: GLenum,
    type_: GLenum,
    id: GLuint,
    severity: GLenum,
    length: GLsizei,
    message: *const GLchar,
    userParam: *mut raw::c_void,
);
pub type GLDEBUGPROCKHR = extern "system" fn (
    source: GLenum,
    type_: GLenum,
    id: GLuint,
    severity: GLenum,
    length: GLsizei,
    message: *const GLchar,
    userParam: *mut GLvoid,
);
pub type GLDEBUGPROCAMD = extern "system" fn (
    id: GLuint,
    category: GLenum,
    severity: GLenum,
    length: GLsizei,
    message: *const GLchar,
    userParam: *mut GLvoid,
);
pub type GLVULKANPROCNV = extern "system" fn ();
}

pub mod enumerations {
    #![allow(dead_code, non_upper_case_globals, unused_imports)]

    use std::os::raw::*;
    use super::types::*;

    pub const _2D: c_uint = 0x0600;
    pub const _2_BYTES: c_uint = 0x1407;
    pub const _3D: c_uint = 0x0601;
    pub const _3D_COLOR: c_uint = 0x0602;
    pub const _3D_COLOR_TEXTURE: c_uint = 0x0603;
    pub const _3_BYTES: c_uint = 0x1408;
    pub const _4D_COLOR_TEXTURE: c_uint = 0x0604;
    pub const _4_BYTES: c_uint = 0x1409;
    pub const ACCUM: c_uint = 0x0100;
    pub const ACCUM_ALPHA_BITS: c_uint = 0x0D5B;
    pub const ACCUM_BLUE_BITS: c_uint = 0x0D5A;
    pub const ACCUM_BUFFER_BIT: c_uint = 0x00000200;
    pub const ACCUM_CLEAR_VALUE: c_uint = 0x0B80;
    pub const ACCUM_GREEN_BITS: c_uint = 0x0D59;
    pub const ACCUM_RED_BITS: c_uint = 0x0D58;
    pub const ACTIVE_ATTRIBUTES: c_uint = 0x8B89;
    pub const ACTIVE_ATTRIBUTE_MAX_LENGTH: c_uint = 0x8B8A;
    pub const ACTIVE_TEXTURE: c_uint = 0x84E0;
    pub const ACTIVE_UNIFORMS: c_uint = 0x8B86;
    pub const ACTIVE_UNIFORM_BLOCKS: c_uint = 0x8A36;
    pub const ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH: c_uint = 0x8A35;
    pub const ACTIVE_UNIFORM_MAX_LENGTH: c_uint = 0x8B87;
    pub const ADD: c_uint = 0x0104;
    pub const ADD_SIGNED: c_uint = 0x8574;
    pub const ALIASED_LINE_WIDTH_RANGE: c_uint = 0x846E;
    pub const ALIASED_POINT_SIZE_RANGE: c_uint = 0x846D;
    pub const ALL_ATTRIB_BITS: c_uint = 0xFFFFFFFF;
    pub const ALPHA: c_uint = 0x1906;
    pub const ALPHA12: c_uint = 0x803D;
    pub const ALPHA16: c_uint = 0x803E;
    pub const ALPHA4: c_uint = 0x803B;
    pub const ALPHA8: c_uint = 0x803C;
    pub const ALPHA_BIAS: c_uint = 0x0D1D;
    pub const ALPHA_BITS: c_uint = 0x0D55;
    pub const ALPHA_INTEGER: c_uint = 0x8D97;
    pub const ALPHA_SCALE: c_uint = 0x0D1C;
    pub const ALPHA_TEST: c_uint = 0x0BC0;
    pub const ALPHA_TEST_FUNC: c_uint = 0x0BC1;
    pub const ALPHA_TEST_REF: c_uint = 0x0BC2;
    pub const ALREADY_SIGNALED: c_uint = 0x911A;
    pub const ALWAYS: c_uint = 0x0207;
    pub const AMBIENT: c_uint = 0x1200;
    pub const AMBIENT_AND_DIFFUSE: c_uint = 0x1602;
    pub const AND: c_uint = 0x1501;
    pub const AND_INVERTED: c_uint = 0x1504;
    pub const AND_REVERSE: c_uint = 0x1502;
    pub const ANY_SAMPLES_PASSED: c_uint = 0x8C2F;
    pub const ARRAY_BUFFER: c_uint = 0x8892;
    pub const ARRAY_BUFFER_BINDING: c_uint = 0x8894;
    pub const ATTACHED_SHADERS: c_uint = 0x8B85;
    pub const ATTRIB_STACK_DEPTH: c_uint = 0x0BB0;
    pub const AUTO_NORMAL: c_uint = 0x0D80;
    pub const AUX0: c_uint = 0x0409;
    pub const AUX1: c_uint = 0x040A;
    pub const AUX2: c_uint = 0x040B;
    pub const AUX3: c_uint = 0x040C;
    pub const AUX_BUFFERS: c_uint = 0x0C00;
    pub const BACK: c_uint = 0x0405;
    pub const BACK_LEFT: c_uint = 0x0402;
    pub const BACK_RIGHT: c_uint = 0x0403;
    pub const BGR: c_uint = 0x80E0;
    pub const BGRA: c_uint = 0x80E1;
    pub const BGRA_INTEGER: c_uint = 0x8D9B;
    pub const BGR_INTEGER: c_uint = 0x8D9A;
    pub const BITMAP: c_uint = 0x1A00;
    pub const BITMAP_TOKEN: c_uint = 0x0704;
    pub const BLEND: c_uint = 0x0BE2;
    pub const BLEND_COLOR: c_uint = 0x8005;
    pub const BLEND_DST: c_uint = 0x0BE0;
    pub const BLEND_DST_ALPHA: c_uint = 0x80CA;
    pub const BLEND_DST_RGB: c_uint = 0x80C8;
    pub const BLEND_EQUATION: c_uint = 0x8009;
    pub const BLEND_EQUATION_ALPHA: c_uint = 0x883D;
    pub const BLEND_EQUATION_RGB: c_uint = 0x8009;
    pub const BLEND_SRC: c_uint = 0x0BE1;
    pub const BLEND_SRC_ALPHA: c_uint = 0x80CB;
    pub const BLEND_SRC_RGB: c_uint = 0x80C9;
    pub const BLUE: c_uint = 0x1905;
    pub const BLUE_BIAS: c_uint = 0x0D1B;
    pub const BLUE_BITS: c_uint = 0x0D54;
    pub const BLUE_INTEGER: c_uint = 0x8D96;
    pub const BLUE_SCALE: c_uint = 0x0D1A;
    pub const BOOL: c_uint = 0x8B56;
    pub const BOOL_VEC2: c_uint = 0x8B57;
    pub const BOOL_VEC3: c_uint = 0x8B58;
    pub const BOOL_VEC4: c_uint = 0x8B59;
    pub const BUFFER_ACCESS: c_uint = 0x88BB;
    pub const BUFFER_ACCESS_FLAGS: c_uint = 0x911F;
    pub const BUFFER_MAPPED: c_uint = 0x88BC;
    pub const BUFFER_MAP_LENGTH: c_uint = 0x9120;
    pub const BUFFER_MAP_OFFSET: c_uint = 0x9121;
    pub const BUFFER_MAP_POINTER: c_uint = 0x88BD;
    pub const BUFFER_SIZE: c_uint = 0x8764;
    pub const BUFFER_USAGE: c_uint = 0x8765;
    pub const BYTE: c_uint = 0x1400;
    pub const C3F_V3F: c_uint = 0x2A24;
    pub const C4F_N3F_V3F: c_uint = 0x2A26;
    pub const C4UB_V2F: c_uint = 0x2A22;
    pub const C4UB_V3F: c_uint = 0x2A23;
    pub const CCW: c_uint = 0x0901;
    pub const CLAMP: c_uint = 0x2900;
    pub const CLAMP_FRAGMENT_COLOR: c_uint = 0x891B;
    pub const CLAMP_READ_COLOR: c_uint = 0x891C;
    pub const CLAMP_TO_BORDER: c_uint = 0x812D;
    pub const CLAMP_TO_EDGE: c_uint = 0x812F;
    pub const CLAMP_VERTEX_COLOR: c_uint = 0x891A;
    pub const CLEAR: c_uint = 0x1500;
    pub const CLIENT_ACTIVE_TEXTURE: c_uint = 0x84E1;
    pub const CLIENT_ALL_ATTRIB_BITS: c_uint = 0xFFFFFFFF;
    pub const CLIENT_ATTRIB_STACK_DEPTH: c_uint = 0x0BB1;
    pub const CLIENT_PIXEL_STORE_BIT: c_uint = 0x00000001;
    pub const CLIENT_VERTEX_ARRAY_BIT: c_uint = 0x00000002;
    pub const CLIP_DISTANCE0: c_uint = 0x3000;
    pub const CLIP_DISTANCE1: c_uint = 0x3001;
    pub const CLIP_DISTANCE2: c_uint = 0x3002;
    pub const CLIP_DISTANCE3: c_uint = 0x3003;
    pub const CLIP_DISTANCE4: c_uint = 0x3004;
    pub const CLIP_DISTANCE5: c_uint = 0x3005;
    pub const CLIP_DISTANCE6: c_uint = 0x3006;
    pub const CLIP_DISTANCE7: c_uint = 0x3007;
    pub const CLIP_PLANE0: c_uint = 0x3000;
    pub const CLIP_PLANE1: c_uint = 0x3001;
    pub const CLIP_PLANE2: c_uint = 0x3002;
    pub const CLIP_PLANE3: c_uint = 0x3003;
    pub const CLIP_PLANE4: c_uint = 0x3004;
    pub const CLIP_PLANE5: c_uint = 0x3005;
    pub const COEFF: c_uint = 0x0A00;
    pub const COLOR: c_uint = 0x1800;
    pub const COLOR_ARRAY: c_uint = 0x8076;
    pub const COLOR_ARRAY_BUFFER_BINDING: c_uint = 0x8898;
    pub const COLOR_ARRAY_POINTER: c_uint = 0x8090;
    pub const COLOR_ARRAY_SIZE: c_uint = 0x8081;
    pub const COLOR_ARRAY_STRIDE: c_uint = 0x8083;
    pub const COLOR_ARRAY_TYPE: c_uint = 0x8082;
    pub const COLOR_ATTACHMENT0: c_uint = 0x8CE0;
    pub const COLOR_ATTACHMENT1: c_uint = 0x8CE1;
    pub const COLOR_ATTACHMENT10: c_uint = 0x8CEA;
    pub const COLOR_ATTACHMENT11: c_uint = 0x8CEB;
    pub const COLOR_ATTACHMENT12: c_uint = 0x8CEC;
    pub const COLOR_ATTACHMENT13: c_uint = 0x8CED;
    pub const COLOR_ATTACHMENT14: c_uint = 0x8CEE;
    pub const COLOR_ATTACHMENT15: c_uint = 0x8CEF;
    pub const COLOR_ATTACHMENT16: c_uint = 0x8CF0;
    pub const COLOR_ATTACHMENT17: c_uint = 0x8CF1;
    pub const COLOR_ATTACHMENT18: c_uint = 0x8CF2;
    pub const COLOR_ATTACHMENT19: c_uint = 0x8CF3;
    pub const COLOR_ATTACHMENT2: c_uint = 0x8CE2;
    pub const COLOR_ATTACHMENT20: c_uint = 0x8CF4;
    pub const COLOR_ATTACHMENT21: c_uint = 0x8CF5;
    pub const COLOR_ATTACHMENT22: c_uint = 0x8CF6;
    pub const COLOR_ATTACHMENT23: c_uint = 0x8CF7;
    pub const COLOR_ATTACHMENT24: c_uint = 0x8CF8;
    pub const COLOR_ATTACHMENT25: c_uint = 0x8CF9;
    pub const COLOR_ATTACHMENT26: c_uint = 0x8CFA;
    pub const COLOR_ATTACHMENT27: c_uint = 0x8CFB;
    pub const COLOR_ATTACHMENT28: c_uint = 0x8CFC;
    pub const COLOR_ATTACHMENT29: c_uint = 0x8CFD;
    pub const COLOR_ATTACHMENT3: c_uint = 0x8CE3;
    pub const COLOR_ATTACHMENT30: c_uint = 0x8CFE;
    pub const COLOR_ATTACHMENT31: c_uint = 0x8CFF;
    pub const COLOR_ATTACHMENT4: c_uint = 0x8CE4;
    pub const COLOR_ATTACHMENT5: c_uint = 0x8CE5;
    pub const COLOR_ATTACHMENT6: c_uint = 0x8CE6;
    pub const COLOR_ATTACHMENT7: c_uint = 0x8CE7;
    pub const COLOR_ATTACHMENT8: c_uint = 0x8CE8;
    pub const COLOR_ATTACHMENT9: c_uint = 0x8CE9;
    pub const COLOR_BUFFER_BIT: c_uint = 0x00004000;
    pub const COLOR_CLEAR_VALUE: c_uint = 0x0C22;
    pub const COLOR_INDEX: c_uint = 0x1900;
    pub const COLOR_INDEXES: c_uint = 0x1603;
    pub const COLOR_LOGIC_OP: c_uint = 0x0BF2;
    pub const COLOR_MATERIAL: c_uint = 0x0B57;
    pub const COLOR_MATERIAL_FACE: c_uint = 0x0B55;
    pub const COLOR_MATERIAL_PARAMETER: c_uint = 0x0B56;
    pub const COLOR_SUM: c_uint = 0x8458;
    pub const COLOR_WRITEMASK: c_uint = 0x0C23;
    pub const COMBINE: c_uint = 0x8570;
    pub const COMBINE_ALPHA: c_uint = 0x8572;
    pub const COMBINE_RGB: c_uint = 0x8571;
    pub const COMPARE_REF_TO_TEXTURE: c_uint = 0x884E;
    pub const COMPARE_R_TO_TEXTURE: c_uint = 0x884E;
    pub const COMPILE: c_uint = 0x1300;
    pub const COMPILE_AND_EXECUTE: c_uint = 0x1301;
    pub const COMPILE_STATUS: c_uint = 0x8B81;
    pub const COMPRESSED_ALPHA: c_uint = 0x84E9;
    pub const COMPRESSED_INTENSITY: c_uint = 0x84EC;
    pub const COMPRESSED_LUMINANCE: c_uint = 0x84EA;
    pub const COMPRESSED_LUMINANCE_ALPHA: c_uint = 0x84EB;
    pub const COMPRESSED_RED: c_uint = 0x8225;
    pub const COMPRESSED_RED_RGTC1: c_uint = 0x8DBB;
    pub const COMPRESSED_RG: c_uint = 0x8226;
    pub const COMPRESSED_RGB: c_uint = 0x84ED;
    pub const COMPRESSED_RGBA: c_uint = 0x84EE;
    pub const COMPRESSED_RG_RGTC2: c_uint = 0x8DBD;
    pub const COMPRESSED_SIGNED_RED_RGTC1: c_uint = 0x8DBC;
    pub const COMPRESSED_SIGNED_RG_RGTC2: c_uint = 0x8DBE;
    pub const COMPRESSED_SLUMINANCE: c_uint = 0x8C4A;
    pub const COMPRESSED_SLUMINANCE_ALPHA: c_uint = 0x8C4B;
    pub const COMPRESSED_SRGB: c_uint = 0x8C48;
    pub const COMPRESSED_SRGB_ALPHA: c_uint = 0x8C49;
    pub const COMPRESSED_TEXTURE_FORMATS: c_uint = 0x86A3;
    pub const CONDITION_SATISFIED: c_uint = 0x911C;
    pub const CONSTANT: c_uint = 0x8576;
    pub const CONSTANT_ALPHA: c_uint = 0x8003;
    pub const CONSTANT_ATTENUATION: c_uint = 0x1207;
    pub const CONSTANT_COLOR: c_uint = 0x8001;
    pub const CONTEXT_COMPATIBILITY_PROFILE_BIT: c_uint = 0x00000002;
    pub const CONTEXT_CORE_PROFILE_BIT: c_uint = 0x00000001;
    pub const CONTEXT_FLAGS: c_uint = 0x821E;
    pub const CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT: c_uint = 0x00000001;
    pub const CONTEXT_PROFILE_MASK: c_uint = 0x9126;
    pub const COORD_REPLACE: c_uint = 0x8862;
    pub const COPY: c_uint = 0x1503;
    pub const COPY_INVERTED: c_uint = 0x150C;
    pub const COPY_PIXEL_TOKEN: c_uint = 0x0706;
    pub const COPY_READ_BUFFER: c_uint = 0x8F36;
    pub const COPY_WRITE_BUFFER: c_uint = 0x8F37;
    pub const CULL_FACE: c_uint = 0x0B44;
    pub const CULL_FACE_MODE: c_uint = 0x0B45;
    pub const CURRENT_BIT: c_uint = 0x00000001;
    pub const CURRENT_COLOR: c_uint = 0x0B00;
    pub const CURRENT_FOG_COORD: c_uint = 0x8453;
    pub const CURRENT_FOG_COORDINATE: c_uint = 0x8453;
    pub const CURRENT_INDEX: c_uint = 0x0B01;
    pub const CURRENT_NORMAL: c_uint = 0x0B02;
    pub const CURRENT_PROGRAM: c_uint = 0x8B8D;
    pub const CURRENT_QUERY: c_uint = 0x8865;
    pub const CURRENT_RASTER_COLOR: c_uint = 0x0B04;
    pub const CURRENT_RASTER_DISTANCE: c_uint = 0x0B09;
    pub const CURRENT_RASTER_INDEX: c_uint = 0x0B05;
    pub const CURRENT_RASTER_POSITION: c_uint = 0x0B07;
    pub const CURRENT_RASTER_POSITION_VALID: c_uint = 0x0B08;
    pub const CURRENT_RASTER_SECONDARY_COLOR: c_uint = 0x845F;
    pub const CURRENT_RASTER_TEXTURE_COORDS: c_uint = 0x0B06;
    pub const CURRENT_SECONDARY_COLOR: c_uint = 0x8459;
    pub const CURRENT_TEXTURE_COORDS: c_uint = 0x0B03;
    pub const CURRENT_VERTEX_ATTRIB: c_uint = 0x8626;
    pub const CW: c_uint = 0x0900;
    pub const DECAL: c_uint = 0x2101;
    pub const DECR: c_uint = 0x1E03;
    pub const DECR_WRAP: c_uint = 0x8508;
    pub const DELETE_STATUS: c_uint = 0x8B80;
    pub const DEPTH: c_uint = 0x1801;
    pub const DEPTH24_STENCIL8: c_uint = 0x88F0;
    pub const DEPTH32F_STENCIL8: c_uint = 0x8CAD;
    pub const DEPTH_ATTACHMENT: c_uint = 0x8D00;
    pub const DEPTH_BIAS: c_uint = 0x0D1F;
    pub const DEPTH_BITS: c_uint = 0x0D56;
    pub const DEPTH_BUFFER_BIT: c_uint = 0x00000100;
    pub const DEPTH_CLAMP: c_uint = 0x864F;
    pub const DEPTH_CLEAR_VALUE: c_uint = 0x0B73;
    pub const DEPTH_COMPONENT: c_uint = 0x1902;
    pub const DEPTH_COMPONENT16: c_uint = 0x81A5;
    pub const DEPTH_COMPONENT24: c_uint = 0x81A6;
    pub const DEPTH_COMPONENT32: c_uint = 0x81A7;
    pub const DEPTH_COMPONENT32F: c_uint = 0x8CAC;
    pub const DEPTH_FUNC: c_uint = 0x0B74;
    pub const DEPTH_RANGE: c_uint = 0x0B70;
    pub const DEPTH_SCALE: c_uint = 0x0D1E;
    pub const DEPTH_STENCIL: c_uint = 0x84F9;
    pub const DEPTH_STENCIL_ATTACHMENT: c_uint = 0x821A;
    pub const DEPTH_TEST: c_uint = 0x0B71;
    pub const DEPTH_TEXTURE_MODE: c_uint = 0x884B;
    pub const DEPTH_WRITEMASK: c_uint = 0x0B72;
    pub const DIFFUSE: c_uint = 0x1201;
    pub const DITHER: c_uint = 0x0BD0;
    pub const DOMAIN: c_uint = 0x0A02;
    pub const DONT_CARE: c_uint = 0x1100;
    pub const DOT3_RGB: c_uint = 0x86AE;
    pub const DOT3_RGBA: c_uint = 0x86AF;
    pub const DOUBLE: c_uint = 0x140A;
    pub const DOUBLEBUFFER: c_uint = 0x0C32;
    pub const DRAW_BUFFER: c_uint = 0x0C01;
    pub const DRAW_BUFFER0: c_uint = 0x8825;
    pub const DRAW_BUFFER1: c_uint = 0x8826;
    pub const DRAW_BUFFER10: c_uint = 0x882F;
    pub const DRAW_BUFFER11: c_uint = 0x8830;
    pub const DRAW_BUFFER12: c_uint = 0x8831;
    pub const DRAW_BUFFER13: c_uint = 0x8832;
    pub const DRAW_BUFFER14: c_uint = 0x8833;
    pub const DRAW_BUFFER15: c_uint = 0x8834;
    pub const DRAW_BUFFER2: c_uint = 0x8827;
    pub const DRAW_BUFFER3: c_uint = 0x8828;
    pub const DRAW_BUFFER4: c_uint = 0x8829;
    pub const DRAW_BUFFER5: c_uint = 0x882A;
    pub const DRAW_BUFFER6: c_uint = 0x882B;
    pub const DRAW_BUFFER7: c_uint = 0x882C;
    pub const DRAW_BUFFER8: c_uint = 0x882D;
    pub const DRAW_BUFFER9: c_uint = 0x882E;
    pub const DRAW_FRAMEBUFFER: c_uint = 0x8CA9;
    pub const DRAW_FRAMEBUFFER_BINDING: c_uint = 0x8CA6;
    pub const DRAW_PIXEL_TOKEN: c_uint = 0x0705;
    pub const DST_ALPHA: c_uint = 0x0304;
    pub const DST_COLOR: c_uint = 0x0306;
    pub const DYNAMIC_COPY: c_uint = 0x88EA;
    pub const DYNAMIC_DRAW: c_uint = 0x88E8;
    pub const DYNAMIC_READ: c_uint = 0x88E9;
    pub const EDGE_FLAG: c_uint = 0x0B43;
    pub const EDGE_FLAG_ARRAY: c_uint = 0x8079;
    pub const EDGE_FLAG_ARRAY_BUFFER_BINDING: c_uint = 0x889B;
    pub const EDGE_FLAG_ARRAY_POINTER: c_uint = 0x8093;
    pub const EDGE_FLAG_ARRAY_STRIDE: c_uint = 0x808C;
    pub const ELEMENT_ARRAY_BUFFER: c_uint = 0x8893;
    pub const ELEMENT_ARRAY_BUFFER_BINDING: c_uint = 0x8895;
    pub const EMISSION: c_uint = 0x1600;
    pub const ENABLE_BIT: c_uint = 0x00002000;
    pub const EQUAL: c_uint = 0x0202;
    pub const EQUIV: c_uint = 0x1509;
    pub const EVAL_BIT: c_uint = 0x00010000;
    pub const EXP: c_uint = 0x0800;
    pub const EXP2: c_uint = 0x0801;
    pub const EXTENSIONS: c_uint = 0x1F03;
    pub const EYE_LINEAR: c_uint = 0x2400;
    pub const EYE_PLANE: c_uint = 0x2502;
    pub const FALSE: c_uchar = 0;
    pub const FASTEST: c_uint = 0x1101;
    pub const FEEDBACK: c_uint = 0x1C01;
    pub const FEEDBACK_BUFFER_POINTER: c_uint = 0x0DF0;
    pub const FEEDBACK_BUFFER_SIZE: c_uint = 0x0DF1;
    pub const FEEDBACK_BUFFER_TYPE: c_uint = 0x0DF2;
    pub const FILL: c_uint = 0x1B02;
    pub const FIRST_VERTEX_CONVENTION: c_uint = 0x8E4D;
    pub const FIXED_ONLY: c_uint = 0x891D;
    pub const FLAT: c_uint = 0x1D00;
    pub const FLOAT: c_uint = 0x1406;
    pub const FLOAT_32_UNSIGNED_INT_24_8_REV: c_uint = 0x8DAD;
    pub const FLOAT_MAT2: c_uint = 0x8B5A;
    pub const FLOAT_MAT2x3: c_uint = 0x8B65;
    pub const FLOAT_MAT2x4: c_uint = 0x8B66;
    pub const FLOAT_MAT3: c_uint = 0x8B5B;
    pub const FLOAT_MAT3x2: c_uint = 0x8B67;
    pub const FLOAT_MAT3x4: c_uint = 0x8B68;
    pub const FLOAT_MAT4: c_uint = 0x8B5C;
    pub const FLOAT_MAT4x2: c_uint = 0x8B69;
    pub const FLOAT_MAT4x3: c_uint = 0x8B6A;
    pub const FLOAT_VEC2: c_uint = 0x8B50;
    pub const FLOAT_VEC3: c_uint = 0x8B51;
    pub const FLOAT_VEC4: c_uint = 0x8B52;
    pub const FOG: c_uint = 0x0B60;
    pub const FOG_BIT: c_uint = 0x00000080;
    pub const FOG_COLOR: c_uint = 0x0B66;
    pub const FOG_COORD: c_uint = 0x8451;
    pub const FOG_COORDINATE: c_uint = 0x8451;
    pub const FOG_COORDINATE_ARRAY: c_uint = 0x8457;
    pub const FOG_COORDINATE_ARRAY_BUFFER_BINDING: c_uint = 0x889D;
    pub const FOG_COORDINATE_ARRAY_POINTER: c_uint = 0x8456;
    pub const FOG_COORDINATE_ARRAY_STRIDE: c_uint = 0x8455;
    pub const FOG_COORDINATE_ARRAY_TYPE: c_uint = 0x8454;
    pub const FOG_COORDINATE_SOURCE: c_uint = 0x8450;
    pub const FOG_COORD_ARRAY: c_uint = 0x8457;
    pub const FOG_COORD_ARRAY_BUFFER_BINDING: c_uint = 0x889D;
    pub const FOG_COORD_ARRAY_POINTER: c_uint = 0x8456;
    pub const FOG_COORD_ARRAY_STRIDE: c_uint = 0x8455;
    pub const FOG_COORD_ARRAY_TYPE: c_uint = 0x8454;
    pub const FOG_COORD_SRC: c_uint = 0x8450;
    pub const FOG_DENSITY: c_uint = 0x0B62;
    pub const FOG_END: c_uint = 0x0B64;
    pub const FOG_HINT: c_uint = 0x0C54;
    pub const FOG_INDEX: c_uint = 0x0B61;
    pub const FOG_MODE: c_uint = 0x0B65;
    pub const FOG_START: c_uint = 0x0B63;
    pub const FRAGMENT_DEPTH: c_uint = 0x8452;
    pub const FRAGMENT_SHADER: c_uint = 0x8B30;
    pub const FRAGMENT_SHADER_DERIVATIVE_HINT: c_uint = 0x8B8B;
    pub const FRAMEBUFFER: c_uint = 0x8D40;
    pub const FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: c_uint = 0x8215;
    pub const FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: c_uint = 0x8214;
    pub const FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: c_uint = 0x8210;
    pub const FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: c_uint = 0x8211;
    pub const FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: c_uint = 0x8216;
    pub const FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: c_uint = 0x8213;
    pub const FRAMEBUFFER_ATTACHMENT_LAYERED: c_uint = 0x8DA7;
    pub const FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: c_uint = 0x8CD1;
    pub const FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: c_uint = 0x8CD0;
    pub const FRAMEBUFFER_ATTACHMENT_RED_SIZE: c_uint = 0x8212;
    pub const FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: c_uint = 0x8217;
    pub const FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: c_uint = 0x8CD3;
    pub const FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: c_uint = 0x8CD4;
    pub const FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: c_uint = 0x8CD2;
    pub const FRAMEBUFFER_BINDING: c_uint = 0x8CA6;
    pub const FRAMEBUFFER_COMPLETE: c_uint = 0x8CD5;
    pub const FRAMEBUFFER_DEFAULT: c_uint = 0x8218;
    pub const FRAMEBUFFER_INCOMPLETE_ATTACHMENT: c_uint = 0x8CD6;
    pub const FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER: c_uint = 0x8CDB;
    pub const FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS: c_uint = 0x8DA8;
    pub const FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: c_uint = 0x8CD7;
    pub const FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: c_uint = 0x8D56;
    pub const FRAMEBUFFER_INCOMPLETE_READ_BUFFER: c_uint = 0x8CDC;
    pub const FRAMEBUFFER_SRGB: c_uint = 0x8DB9;
    pub const FRAMEBUFFER_UNDEFINED: c_uint = 0x8219;
    pub const FRAMEBUFFER_UNSUPPORTED: c_uint = 0x8CDD;
    pub const FRONT: c_uint = 0x0404;
    pub const FRONT_AND_BACK: c_uint = 0x0408;
    pub const FRONT_FACE: c_uint = 0x0B46;
    pub const FRONT_LEFT: c_uint = 0x0400;
    pub const FRONT_RIGHT: c_uint = 0x0401;
    pub const FUNC_ADD: c_uint = 0x8006;
    pub const FUNC_REVERSE_SUBTRACT: c_uint = 0x800B;
    pub const FUNC_SUBTRACT: c_uint = 0x800A;
    pub const GENERATE_MIPMAP: c_uint = 0x8191;
    pub const GENERATE_MIPMAP_HINT: c_uint = 0x8192;
    pub const GEOMETRY_INPUT_TYPE: c_uint = 0x8917;
    pub const GEOMETRY_OUTPUT_TYPE: c_uint = 0x8918;
    pub const GEOMETRY_SHADER: c_uint = 0x8DD9;
    pub const GEOMETRY_VERTICES_OUT: c_uint = 0x8916;
    pub const GEQUAL: c_uint = 0x0206;
    pub const GREATER: c_uint = 0x0204;
    pub const GREEN: c_uint = 0x1904;
    pub const GREEN_BIAS: c_uint = 0x0D19;
    pub const GREEN_BITS: c_uint = 0x0D53;
    pub const GREEN_INTEGER: c_uint = 0x8D95;
    pub const GREEN_SCALE: c_uint = 0x0D18;
    pub const HALF_FLOAT: c_uint = 0x140B;
    pub const HINT_BIT: c_uint = 0x00008000;
    pub const INCR: c_uint = 0x1E02;
    pub const INCR_WRAP: c_uint = 0x8507;
    pub const INDEX: c_uint = 0x8222;
    pub const INDEX_ARRAY: c_uint = 0x8077;
    pub const INDEX_ARRAY_BUFFER_BINDING: c_uint = 0x8899;
    pub const INDEX_ARRAY_POINTER: c_uint = 0x8091;
    pub const INDEX_ARRAY_STRIDE: c_uint = 0x8086;
    pub const INDEX_ARRAY_TYPE: c_uint = 0x8085;
    pub const INDEX_BITS: c_uint = 0x0D51;
    pub const INDEX_CLEAR_VALUE: c_uint = 0x0C20;
    pub const INDEX_LOGIC_OP: c_uint = 0x0BF1;
    pub const INDEX_MODE: c_uint = 0x0C30;
    pub const INDEX_OFFSET: c_uint = 0x0D13;
    pub const INDEX_SHIFT: c_uint = 0x0D12;
    pub const INDEX_WRITEMASK: c_uint = 0x0C21;
    pub const INFO_LOG_LENGTH: c_uint = 0x8B84;
    pub const INT: c_uint = 0x1404;
    pub const INTENSITY: c_uint = 0x8049;
    pub const INTENSITY12: c_uint = 0x804C;
    pub const INTENSITY16: c_uint = 0x804D;
    pub const INTENSITY4: c_uint = 0x804A;
    pub const INTENSITY8: c_uint = 0x804B;
    pub const INTERLEAVED_ATTRIBS: c_uint = 0x8C8C;
    pub const INTERPOLATE: c_uint = 0x8575;
    pub const INT_2_10_10_10_REV: c_uint = 0x8D9F;
    pub const INT_SAMPLER_1D: c_uint = 0x8DC9;
    pub const INT_SAMPLER_1D_ARRAY: c_uint = 0x8DCE;
    pub const INT_SAMPLER_2D: c_uint = 0x8DCA;
    pub const INT_SAMPLER_2D_ARRAY: c_uint = 0x8DCF;
    pub const INT_SAMPLER_2D_MULTISAMPLE: c_uint = 0x9109;
    pub const INT_SAMPLER_2D_MULTISAMPLE_ARRAY: c_uint = 0x910C;
    pub const INT_SAMPLER_2D_RECT: c_uint = 0x8DCD;
    pub const INT_SAMPLER_3D: c_uint = 0x8DCB;
    pub const INT_SAMPLER_BUFFER: c_uint = 0x8DD0;
    pub const INT_SAMPLER_CUBE: c_uint = 0x8DCC;
    pub const INT_VEC2: c_uint = 0x8B53;
    pub const INT_VEC3: c_uint = 0x8B54;
    pub const INT_VEC4: c_uint = 0x8B55;
    pub const INVALID_ENUM: c_uint = 0x0500;
    pub const INVALID_FRAMEBUFFER_OPERATION: c_uint = 0x0506;
    pub const INVALID_INDEX: c_uint = 0xFFFFFFFF;
    pub const INVALID_OPERATION: c_uint = 0x0502;
    pub const INVALID_VALUE: c_uint = 0x0501;
    pub const INVERT: c_uint = 0x150A;
    pub const KEEP: c_uint = 0x1E00;
    pub const LAST_VERTEX_CONVENTION: c_uint = 0x8E4E;
    pub const LEFT: c_uint = 0x0406;
    pub const LEQUAL: c_uint = 0x0203;
    pub const LESS: c_uint = 0x0201;
    pub const LIGHT0: c_uint = 0x4000;
    pub const LIGHT1: c_uint = 0x4001;
    pub const LIGHT2: c_uint = 0x4002;
    pub const LIGHT3: c_uint = 0x4003;
    pub const LIGHT4: c_uint = 0x4004;
    pub const LIGHT5: c_uint = 0x4005;
    pub const LIGHT6: c_uint = 0x4006;
    pub const LIGHT7: c_uint = 0x4007;
    pub const LIGHTING: c_uint = 0x0B50;
    pub const LIGHTING_BIT: c_uint = 0x00000040;
    pub const LIGHT_MODEL_AMBIENT: c_uint = 0x0B53;
    pub const LIGHT_MODEL_COLOR_CONTROL: c_uint = 0x81F8;
    pub const LIGHT_MODEL_LOCAL_VIEWER: c_uint = 0x0B51;
    pub const LIGHT_MODEL_TWO_SIDE: c_uint = 0x0B52;
    pub const LINE: c_uint = 0x1B01;
    pub const LINEAR: c_uint = 0x2601;
    pub const LINEAR_ATTENUATION: c_uint = 0x1208;
    pub const LINEAR_MIPMAP_LINEAR: c_uint = 0x2703;
    pub const LINEAR_MIPMAP_NEAREST: c_uint = 0x2701;
    pub const LINES: c_uint = 0x0001;
    pub const LINES_ADJACENCY: c_uint = 0x000A;
    pub const LINE_BIT: c_uint = 0x00000004;
    pub const LINE_LOOP: c_uint = 0x0002;
    pub const LINE_RESET_TOKEN: c_uint = 0x0707;
    pub const LINE_SMOOTH: c_uint = 0x0B20;
    pub const LINE_SMOOTH_HINT: c_uint = 0x0C52;
    pub const LINE_STIPPLE: c_uint = 0x0B24;
    pub const LINE_STIPPLE_PATTERN: c_uint = 0x0B25;
    pub const LINE_STIPPLE_REPEAT: c_uint = 0x0B26;
    pub const LINE_STRIP: c_uint = 0x0003;
    pub const LINE_STRIP_ADJACENCY: c_uint = 0x000B;
    pub const LINE_TOKEN: c_uint = 0x0702;
    pub const LINE_WIDTH: c_uint = 0x0B21;
    pub const LINE_WIDTH_GRANULARITY: c_uint = 0x0B23;
    pub const LINE_WIDTH_RANGE: c_uint = 0x0B22;
    pub const LINK_STATUS: c_uint = 0x8B82;
    pub const LIST_BASE: c_uint = 0x0B32;
    pub const LIST_BIT: c_uint = 0x00020000;
    pub const LIST_INDEX: c_uint = 0x0B33;
    pub const LIST_MODE: c_uint = 0x0B30;
    pub const LOAD: c_uint = 0x0101;
    pub const LOGIC_OP: c_uint = 0x0BF1;
    pub const LOGIC_OP_MODE: c_uint = 0x0BF0;
    pub const LOWER_LEFT: c_uint = 0x8CA1;
    pub const LUMINANCE: c_uint = 0x1909;
    pub const LUMINANCE12: c_uint = 0x8041;
    pub const LUMINANCE12_ALPHA12: c_uint = 0x8047;
    pub const LUMINANCE12_ALPHA4: c_uint = 0x8046;
    pub const LUMINANCE16: c_uint = 0x8042;
    pub const LUMINANCE16_ALPHA16: c_uint = 0x8048;
    pub const LUMINANCE4: c_uint = 0x803F;
    pub const LUMINANCE4_ALPHA4: c_uint = 0x8043;
    pub const LUMINANCE6_ALPHA2: c_uint = 0x8044;
    pub const LUMINANCE8: c_uint = 0x8040;
    pub const LUMINANCE8_ALPHA8: c_uint = 0x8045;
    pub const LUMINANCE_ALPHA: c_uint = 0x190A;
    pub const MAJOR_VERSION: c_uint = 0x821B;
    pub const MAP1_COLOR_4: c_uint = 0x0D90;
    pub const MAP1_GRID_DOMAIN: c_uint = 0x0DD0;
    pub const MAP1_GRID_SEGMENTS: c_uint = 0x0DD1;
    pub const MAP1_INDEX: c_uint = 0x0D91;
    pub const MAP1_NORMAL: c_uint = 0x0D92;
    pub const MAP1_TEXTURE_COORD_1: c_uint = 0x0D93;
    pub const MAP1_TEXTURE_COORD_2: c_uint = 0x0D94;
    pub const MAP1_TEXTURE_COORD_3: c_uint = 0x0D95;
    pub const MAP1_TEXTURE_COORD_4: c_uint = 0x0D96;
    pub const MAP1_VERTEX_3: c_uint = 0x0D97;
    pub const MAP1_VERTEX_4: c_uint = 0x0D98;
    pub const MAP2_COLOR_4: c_uint = 0x0DB0;
    pub const MAP2_GRID_DOMAIN: c_uint = 0x0DD2;
    pub const MAP2_GRID_SEGMENTS: c_uint = 0x0DD3;
    pub const MAP2_INDEX: c_uint = 0x0DB1;
    pub const MAP2_NORMAL: c_uint = 0x0DB2;
    pub const MAP2_TEXTURE_COORD_1: c_uint = 0x0DB3;
    pub const MAP2_TEXTURE_COORD_2: c_uint = 0x0DB4;
    pub const MAP2_TEXTURE_COORD_3: c_uint = 0x0DB5;
    pub const MAP2_TEXTURE_COORD_4: c_uint = 0x0DB6;
    pub const MAP2_VERTEX_3: c_uint = 0x0DB7;
    pub const MAP2_VERTEX_4: c_uint = 0x0DB8;
    pub const MAP_COLOR: c_uint = 0x0D10;
    pub const MAP_FLUSH_EXPLICIT_BIT: c_uint = 0x0010;
    pub const MAP_INVALIDATE_BUFFER_BIT: c_uint = 0x0008;
    pub const MAP_INVALIDATE_RANGE_BIT: c_uint = 0x0004;
    pub const MAP_READ_BIT: c_uint = 0x0001;
    pub const MAP_STENCIL: c_uint = 0x0D11;
    pub const MAP_UNSYNCHRONIZED_BIT: c_uint = 0x0020;
    pub const MAP_WRITE_BIT: c_uint = 0x0002;
    pub const MATRIX_MODE: c_uint = 0x0BA0;
    pub const MAX: c_uint = 0x8008;
    pub const MAX_3D_TEXTURE_SIZE: c_uint = 0x8073;
    pub const MAX_ARRAY_TEXTURE_LAYERS: c_uint = 0x88FF;
    pub const MAX_ATTRIB_STACK_DEPTH: c_uint = 0x0D35;
    pub const MAX_CLIENT_ATTRIB_STACK_DEPTH: c_uint = 0x0D3B;
    pub const MAX_CLIP_DISTANCES: c_uint = 0x0D32;
    pub const MAX_CLIP_PLANES: c_uint = 0x0D32;
    pub const MAX_COLOR_ATTACHMENTS: c_uint = 0x8CDF;
    pub const MAX_COLOR_TEXTURE_SAMPLES: c_uint = 0x910E;
    pub const MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: c_uint = 0x8A33;
    pub const MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS: c_uint = 0x8A32;
    pub const MAX_COMBINED_TEXTURE_IMAGE_UNITS: c_uint = 0x8B4D;
    pub const MAX_COMBINED_UNIFORM_BLOCKS: c_uint = 0x8A2E;
    pub const MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: c_uint = 0x8A31;
    pub const MAX_CUBE_MAP_TEXTURE_SIZE: c_uint = 0x851C;
    pub const MAX_DEPTH_TEXTURE_SAMPLES: c_uint = 0x910F;
    pub const MAX_DRAW_BUFFERS: c_uint = 0x8824;
    pub const MAX_DUAL_SOURCE_DRAW_BUFFERS: c_uint = 0x88FC;
    pub const MAX_ELEMENTS_INDICES: c_uint = 0x80E9;
    pub const MAX_ELEMENTS_VERTICES: c_uint = 0x80E8;
    pub const MAX_EVAL_ORDER: c_uint = 0x0D30;
    pub const MAX_FRAGMENT_INPUT_COMPONENTS: c_uint = 0x9125;
    pub const MAX_FRAGMENT_UNIFORM_BLOCKS: c_uint = 0x8A2D;
    pub const MAX_FRAGMENT_UNIFORM_COMPONENTS: c_uint = 0x8B49;
    pub const MAX_GEOMETRY_INPUT_COMPONENTS: c_uint = 0x9123;
    pub const MAX_GEOMETRY_OUTPUT_COMPONENTS: c_uint = 0x9124;
    pub const MAX_GEOMETRY_OUTPUT_VERTICES: c_uint = 0x8DE0;
    pub const MAX_GEOMETRY_TEXTURE_IMAGE_UNITS: c_uint = 0x8C29;
    pub const MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS: c_uint = 0x8DE1;
    pub const MAX_GEOMETRY_UNIFORM_BLOCKS: c_uint = 0x8A2C;
    pub const MAX_GEOMETRY_UNIFORM_COMPONENTS: c_uint = 0x8DDF;
    pub const MAX_INTEGER_SAMPLES: c_uint = 0x9110;
    pub const MAX_LIGHTS: c_uint = 0x0D31;
    pub const MAX_LIST_NESTING: c_uint = 0x0B31;
    pub const MAX_MODELVIEW_STACK_DEPTH: c_uint = 0x0D36;
    pub const MAX_NAME_STACK_DEPTH: c_uint = 0x0D37;
    pub const MAX_PIXEL_MAP_TABLE: c_uint = 0x0D34;
    pub const MAX_PROGRAM_TEXEL_OFFSET: c_uint = 0x8905;
    pub const MAX_PROJECTION_STACK_DEPTH: c_uint = 0x0D38;
    pub const MAX_RECTANGLE_TEXTURE_SIZE: c_uint = 0x84F8;
    pub const MAX_RENDERBUFFER_SIZE: c_uint = 0x84E8;
    pub const MAX_SAMPLES: c_uint = 0x8D57;
    pub const MAX_SAMPLE_MASK_WORDS: c_uint = 0x8E59;
    pub const MAX_SERVER_WAIT_TIMEOUT: c_uint = 0x9111;
    pub const MAX_TEXTURE_BUFFER_SIZE: c_uint = 0x8C2B;
    pub const MAX_TEXTURE_COORDS: c_uint = 0x8871;
    pub const MAX_TEXTURE_IMAGE_UNITS: c_uint = 0x8872;
    pub const MAX_TEXTURE_LOD_BIAS: c_uint = 0x84FD;
    pub const MAX_TEXTURE_SIZE: c_uint = 0x0D33;
    pub const MAX_TEXTURE_STACK_DEPTH: c_uint = 0x0D39;
    pub const MAX_TEXTURE_UNITS: c_uint = 0x84E2;
    pub const MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: c_uint = 0x8C8A;
    pub const MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: c_uint = 0x8C8B;
    pub const MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: c_uint = 0x8C80;
    pub const MAX_UNIFORM_BLOCK_SIZE: c_uint = 0x8A30;
    pub const MAX_UNIFORM_BUFFER_BINDINGS: c_uint = 0x8A2F;
    pub const MAX_VARYING_COMPONENTS: c_uint = 0x8B4B;
    pub const MAX_VARYING_FLOATS: c_uint = 0x8B4B;
    pub const MAX_VERTEX_ATTRIBS: c_uint = 0x8869;
    pub const MAX_VERTEX_OUTPUT_COMPONENTS: c_uint = 0x9122;
    pub const MAX_VERTEX_TEXTURE_IMAGE_UNITS: c_uint = 0x8B4C;
    pub const MAX_VERTEX_UNIFORM_BLOCKS: c_uint = 0x8A2B;
    pub const MAX_VERTEX_UNIFORM_COMPONENTS: c_uint = 0x8B4A;
    pub const MAX_VIEWPORT_DIMS: c_uint = 0x0D3A;
    pub const MIN: c_uint = 0x8007;
    pub const MINOR_VERSION: c_uint = 0x821C;
    pub const MIN_PROGRAM_TEXEL_OFFSET: c_uint = 0x8904;
    pub const MIRRORED_REPEAT: c_uint = 0x8370;
    pub const MODELVIEW: c_uint = 0x1700;
    pub const MODELVIEW_MATRIX: c_uint = 0x0BA6;
    pub const MODELVIEW_STACK_DEPTH: c_uint = 0x0BA3;
    pub const MODULATE: c_uint = 0x2100;
    pub const MULT: c_uint = 0x0103;
    pub const MULTISAMPLE: c_uint = 0x809D;
    pub const MULTISAMPLE_BIT: c_uint = 0x20000000;
    pub const N3F_V3F: c_uint = 0x2A25;
    pub const NAME_STACK_DEPTH: c_uint = 0x0D70;
    pub const NAND: c_uint = 0x150E;
    pub const NEAREST: c_uint = 0x2600;
    pub const NEAREST_MIPMAP_LINEAR: c_uint = 0x2702;
    pub const NEAREST_MIPMAP_NEAREST: c_uint = 0x2700;
    pub const NEVER: c_uint = 0x0200;
    pub const NICEST: c_uint = 0x1102;
    pub const NONE: c_uint = 0;
    pub const NOOP: c_uint = 0x1505;
    pub const NOR: c_uint = 0x1508;
    pub const NORMALIZE: c_uint = 0x0BA1;
    pub const NORMAL_ARRAY: c_uint = 0x8075;
    pub const NORMAL_ARRAY_BUFFER_BINDING: c_uint = 0x8897;
    pub const NORMAL_ARRAY_POINTER: c_uint = 0x808F;
    pub const NORMAL_ARRAY_STRIDE: c_uint = 0x807F;
    pub const NORMAL_ARRAY_TYPE: c_uint = 0x807E;
    pub const NORMAL_MAP: c_uint = 0x8511;
    pub const NOTEQUAL: c_uint = 0x0205;
    pub const NO_ERROR: c_uint = 0;
    pub const NUM_COMPRESSED_TEXTURE_FORMATS: c_uint = 0x86A2;
    pub const NUM_EXTENSIONS: c_uint = 0x821D;
    pub const OBJECT_LINEAR: c_uint = 0x2401;
    pub const OBJECT_PLANE: c_uint = 0x2501;
    pub const OBJECT_TYPE: c_uint = 0x9112;
    pub const ONE: c_uint = 1;
    pub const ONE_MINUS_CONSTANT_ALPHA: c_uint = 0x8004;
    pub const ONE_MINUS_CONSTANT_COLOR: c_uint = 0x8002;
    pub const ONE_MINUS_DST_ALPHA: c_uint = 0x0305;
    pub const ONE_MINUS_DST_COLOR: c_uint = 0x0307;
    pub const ONE_MINUS_SRC1_ALPHA: c_uint = 0x88FB;
    pub const ONE_MINUS_SRC1_COLOR: c_uint = 0x88FA;
    pub const ONE_MINUS_SRC_ALPHA: c_uint = 0x0303;
    pub const ONE_MINUS_SRC_COLOR: c_uint = 0x0301;
    pub const OPERAND0_ALPHA: c_uint = 0x8598;
    pub const OPERAND0_RGB: c_uint = 0x8590;
    pub const OPERAND1_ALPHA: c_uint = 0x8599;
    pub const OPERAND1_RGB: c_uint = 0x8591;
    pub const OPERAND2_ALPHA: c_uint = 0x859A;
    pub const OPERAND2_RGB: c_uint = 0x8592;
    pub const OR: c_uint = 0x1507;
    pub const ORDER: c_uint = 0x0A01;
    pub const OR_INVERTED: c_uint = 0x150D;
    pub const OR_REVERSE: c_uint = 0x150B;
    pub const OUT_OF_MEMORY: c_uint = 0x0505;
    pub const PACK_ALIGNMENT: c_uint = 0x0D05;
    pub const PACK_IMAGE_HEIGHT: c_uint = 0x806C;
    pub const PACK_LSB_FIRST: c_uint = 0x0D01;
    pub const PACK_ROW_LENGTH: c_uint = 0x0D02;
    pub const PACK_SKIP_IMAGES: c_uint = 0x806B;
    pub const PACK_SKIP_PIXELS: c_uint = 0x0D04;
    pub const PACK_SKIP_ROWS: c_uint = 0x0D03;
    pub const PACK_SWAP_BYTES: c_uint = 0x0D00;
    pub const PASS_THROUGH_TOKEN: c_uint = 0x0700;
    pub const PERSPECTIVE_CORRECTION_HINT: c_uint = 0x0C50;
    pub const PIXEL_MAP_A_TO_A: c_uint = 0x0C79;
    pub const PIXEL_MAP_A_TO_A_SIZE: c_uint = 0x0CB9;
    pub const PIXEL_MAP_B_TO_B: c_uint = 0x0C78;
    pub const PIXEL_MAP_B_TO_B_SIZE: c_uint = 0x0CB8;
    pub const PIXEL_MAP_G_TO_G: c_uint = 0x0C77;
    pub const PIXEL_MAP_G_TO_G_SIZE: c_uint = 0x0CB7;
    pub const PIXEL_MAP_I_TO_A: c_uint = 0x0C75;
    pub const PIXEL_MAP_I_TO_A_SIZE: c_uint = 0x0CB5;
    pub const PIXEL_MAP_I_TO_B: c_uint = 0x0C74;
    pub const PIXEL_MAP_I_TO_B_SIZE: c_uint = 0x0CB4;
    pub const PIXEL_MAP_I_TO_G: c_uint = 0x0C73;
    pub const PIXEL_MAP_I_TO_G_SIZE: c_uint = 0x0CB3;
    pub const PIXEL_MAP_I_TO_I: c_uint = 0x0C70;
    pub const PIXEL_MAP_I_TO_I_SIZE: c_uint = 0x0CB0;
    pub const PIXEL_MAP_I_TO_R: c_uint = 0x0C72;
    pub const PIXEL_MAP_I_TO_R_SIZE: c_uint = 0x0CB2;
    pub const PIXEL_MAP_R_TO_R: c_uint = 0x0C76;
    pub const PIXEL_MAP_R_TO_R_SIZE: c_uint = 0x0CB6;
    pub const PIXEL_MAP_S_TO_S: c_uint = 0x0C71;
    pub const PIXEL_MAP_S_TO_S_SIZE: c_uint = 0x0CB1;
    pub const PIXEL_MODE_BIT: c_uint = 0x00000020;
    pub const PIXEL_PACK_BUFFER: c_uint = 0x88EB;
    pub const PIXEL_PACK_BUFFER_BINDING: c_uint = 0x88ED;
    pub const PIXEL_UNPACK_BUFFER: c_uint = 0x88EC;
    pub const PIXEL_UNPACK_BUFFER_BINDING: c_uint = 0x88EF;
    pub const POINT: c_uint = 0x1B00;
    pub const POINTS: c_uint = 0x0000;
    pub const POINT_BIT: c_uint = 0x00000002;
    pub const POINT_DISTANCE_ATTENUATION: c_uint = 0x8129;
    pub const POINT_FADE_THRESHOLD_SIZE: c_uint = 0x8128;
    pub const POINT_SIZE: c_uint = 0x0B11;
    pub const POINT_SIZE_GRANULARITY: c_uint = 0x0B13;
    pub const POINT_SIZE_MAX: c_uint = 0x8127;
    pub const POINT_SIZE_MIN: c_uint = 0x8126;
    pub const POINT_SIZE_RANGE: c_uint = 0x0B12;
    pub const POINT_SMOOTH: c_uint = 0x0B10;
    pub const POINT_SMOOTH_HINT: c_uint = 0x0C51;
    pub const POINT_SPRITE: c_uint = 0x8861;
    pub const POINT_SPRITE_COORD_ORIGIN: c_uint = 0x8CA0;
    pub const POINT_TOKEN: c_uint = 0x0701;
    pub const POLYGON: c_uint = 0x0009;
    pub const POLYGON_BIT: c_uint = 0x00000008;
    pub const POLYGON_MODE: c_uint = 0x0B40;
    pub const POLYGON_OFFSET_FACTOR: c_uint = 0x8038;
    pub const POLYGON_OFFSET_FILL: c_uint = 0x8037;
    pub const POLYGON_OFFSET_LINE: c_uint = 0x2A02;
    pub const POLYGON_OFFSET_POINT: c_uint = 0x2A01;
    pub const POLYGON_OFFSET_UNITS: c_uint = 0x2A00;
    pub const POLYGON_SMOOTH: c_uint = 0x0B41;
    pub const POLYGON_SMOOTH_HINT: c_uint = 0x0C53;
    pub const POLYGON_STIPPLE: c_uint = 0x0B42;
    pub const POLYGON_STIPPLE_BIT: c_uint = 0x00000010;
    pub const POLYGON_TOKEN: c_uint = 0x0703;
    pub const POSITION: c_uint = 0x1203;
    pub const PREVIOUS: c_uint = 0x8578;
    pub const PRIMARY_COLOR: c_uint = 0x8577;
    pub const PRIMITIVES_GENERATED: c_uint = 0x8C87;
    pub const PRIMITIVE_RESTART: c_uint = 0x8F9D;
    pub const PRIMITIVE_RESTART_INDEX: c_uint = 0x8F9E;
    pub const PROGRAM_POINT_SIZE: c_uint = 0x8642;
    pub const PROJECTION: c_uint = 0x1701;
    pub const PROJECTION_MATRIX: c_uint = 0x0BA7;
    pub const PROJECTION_STACK_DEPTH: c_uint = 0x0BA4;
    pub const PROVOKING_VERTEX: c_uint = 0x8E4F;
    pub const PROXY_TEXTURE_1D: c_uint = 0x8063;
    pub const PROXY_TEXTURE_1D_ARRAY: c_uint = 0x8C19;
    pub const PROXY_TEXTURE_2D: c_uint = 0x8064;
    pub const PROXY_TEXTURE_2D_ARRAY: c_uint = 0x8C1B;
    pub const PROXY_TEXTURE_2D_MULTISAMPLE: c_uint = 0x9101;
    pub const PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY: c_uint = 0x9103;
    pub const PROXY_TEXTURE_3D: c_uint = 0x8070;
    pub const PROXY_TEXTURE_CUBE_MAP: c_uint = 0x851B;
    pub const PROXY_TEXTURE_RECTANGLE: c_uint = 0x84F7;
    pub const Q: c_uint = 0x2003;
    pub const QUADRATIC_ATTENUATION: c_uint = 0x1209;
    pub const QUADS: c_uint = 0x0007;
    pub const QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION: c_uint = 0x8E4C;
    pub const QUAD_STRIP: c_uint = 0x0008;
    pub const QUERY_BY_REGION_NO_WAIT: c_uint = 0x8E16;
    pub const QUERY_BY_REGION_WAIT: c_uint = 0x8E15;
    pub const QUERY_COUNTER_BITS: c_uint = 0x8864;
    pub const QUERY_NO_WAIT: c_uint = 0x8E14;
    pub const QUERY_RESULT: c_uint = 0x8866;
    pub const QUERY_RESULT_AVAILABLE: c_uint = 0x8867;
    pub const QUERY_WAIT: c_uint = 0x8E13;
    pub const R: c_uint = 0x2002;
    pub const R11F_G11F_B10F: c_uint = 0x8C3A;
    pub const R16: c_uint = 0x822A;
    pub const R16F: c_uint = 0x822D;
    pub const R16I: c_uint = 0x8233;
    pub const R16UI: c_uint = 0x8234;
    pub const R16_SNORM: c_uint = 0x8F98;
    pub const R32F: c_uint = 0x822E;
    pub const R32I: c_uint = 0x8235;
    pub const R32UI: c_uint = 0x8236;
    pub const R3_G3_B2: c_uint = 0x2A10;
    pub const R8: c_uint = 0x8229;
    pub const R8I: c_uint = 0x8231;
    pub const R8UI: c_uint = 0x8232;
    pub const R8_SNORM: c_uint = 0x8F94;
    pub const RASTERIZER_DISCARD: c_uint = 0x8C89;
    pub const READ_BUFFER: c_uint = 0x0C02;
    pub const READ_FRAMEBUFFER: c_uint = 0x8CA8;
    pub const READ_FRAMEBUFFER_BINDING: c_uint = 0x8CAA;
    pub const READ_ONLY: c_uint = 0x88B8;
    pub const READ_WRITE: c_uint = 0x88BA;
    pub const RED: c_uint = 0x1903;
    pub const RED_BIAS: c_uint = 0x0D15;
    pub const RED_BITS: c_uint = 0x0D52;
    pub const RED_INTEGER: c_uint = 0x8D94;
    pub const RED_SCALE: c_uint = 0x0D14;
    pub const REFLECTION_MAP: c_uint = 0x8512;
    pub const RENDER: c_uint = 0x1C00;
    pub const RENDERBUFFER: c_uint = 0x8D41;
    pub const RENDERBUFFER_ALPHA_SIZE: c_uint = 0x8D53;
    pub const RENDERBUFFER_BINDING: c_uint = 0x8CA7;
    pub const RENDERBUFFER_BLUE_SIZE: c_uint = 0x8D52;
    pub const RENDERBUFFER_DEPTH_SIZE: c_uint = 0x8D54;
    pub const RENDERBUFFER_GREEN_SIZE: c_uint = 0x8D51;
    pub const RENDERBUFFER_HEIGHT: c_uint = 0x8D43;
    pub const RENDERBUFFER_INTERNAL_FORMAT: c_uint = 0x8D44;
    pub const RENDERBUFFER_RED_SIZE: c_uint = 0x8D50;
    pub const RENDERBUFFER_SAMPLES: c_uint = 0x8CAB;
    pub const RENDERBUFFER_STENCIL_SIZE: c_uint = 0x8D55;
    pub const RENDERBUFFER_WIDTH: c_uint = 0x8D42;
    pub const RENDERER: c_uint = 0x1F01;
    pub const RENDER_MODE: c_uint = 0x0C40;
    pub const REPEAT: c_uint = 0x2901;
    pub const REPLACE: c_uint = 0x1E01;
    pub const RESCALE_NORMAL: c_uint = 0x803A;
    pub const RETURN: c_uint = 0x0102;
    pub const RG: c_uint = 0x8227;
    pub const RG16: c_uint = 0x822C;
    pub const RG16F: c_uint = 0x822F;
    pub const RG16I: c_uint = 0x8239;
    pub const RG16UI: c_uint = 0x823A;
    pub const RG16_SNORM: c_uint = 0x8F99;
    pub const RG32F: c_uint = 0x8230;
    pub const RG32I: c_uint = 0x823B;
    pub const RG32UI: c_uint = 0x823C;
    pub const RG8: c_uint = 0x822B;
    pub const RG8I: c_uint = 0x8237;
    pub const RG8UI: c_uint = 0x8238;
    pub const RG8_SNORM: c_uint = 0x8F95;
    pub const RGB: c_uint = 0x1907;
    pub const RGB10: c_uint = 0x8052;
    pub const RGB10_A2: c_uint = 0x8059;
    pub const RGB10_A2UI: c_uint = 0x906F;
    pub const RGB12: c_uint = 0x8053;
    pub const RGB16: c_uint = 0x8054;
    pub const RGB16F: c_uint = 0x881B;
    pub const RGB16I: c_uint = 0x8D89;
    pub const RGB16UI: c_uint = 0x8D77;
    pub const RGB16_SNORM: c_uint = 0x8F9A;
    pub const RGB32F: c_uint = 0x8815;
    pub const RGB32I: c_uint = 0x8D83;
    pub const RGB32UI: c_uint = 0x8D71;
    pub const RGB4: c_uint = 0x804F;
    pub const RGB5: c_uint = 0x8050;
    pub const RGB5_A1: c_uint = 0x8057;
    pub const RGB8: c_uint = 0x8051;
    pub const RGB8I: c_uint = 0x8D8F;
    pub const RGB8UI: c_uint = 0x8D7D;
    pub const RGB8_SNORM: c_uint = 0x8F96;
    pub const RGB9_E5: c_uint = 0x8C3D;
    pub const RGBA: c_uint = 0x1908;
    pub const RGBA12: c_uint = 0x805A;
    pub const RGBA16: c_uint = 0x805B;
    pub const RGBA16F: c_uint = 0x881A;
    pub const RGBA16I: c_uint = 0x8D88;
    pub const RGBA16UI: c_uint = 0x8D76;
    pub const RGBA16_SNORM: c_uint = 0x8F9B;
    pub const RGBA2: c_uint = 0x8055;
    pub const RGBA32F: c_uint = 0x8814;
    pub const RGBA32I: c_uint = 0x8D82;
    pub const RGBA32UI: c_uint = 0x8D70;
    pub const RGBA4: c_uint = 0x8056;
    pub const RGBA8: c_uint = 0x8058;
    pub const RGBA8I: c_uint = 0x8D8E;
    pub const RGBA8UI: c_uint = 0x8D7C;
    pub const RGBA8_SNORM: c_uint = 0x8F97;
    pub const RGBA_INTEGER: c_uint = 0x8D99;
    pub const RGBA_MODE: c_uint = 0x0C31;
    pub const RGB_INTEGER: c_uint = 0x8D98;
    pub const RGB_SCALE: c_uint = 0x8573;
    pub const RG_INTEGER: c_uint = 0x8228;
    pub const RIGHT: c_uint = 0x0407;
    pub const S: c_uint = 0x2000;
    pub const SAMPLER_1D: c_uint = 0x8B5D;
    pub const SAMPLER_1D_ARRAY: c_uint = 0x8DC0;
    pub const SAMPLER_1D_ARRAY_SHADOW: c_uint = 0x8DC3;
    pub const SAMPLER_1D_SHADOW: c_uint = 0x8B61;
    pub const SAMPLER_2D: c_uint = 0x8B5E;
    pub const SAMPLER_2D_ARRAY: c_uint = 0x8DC1;
    pub const SAMPLER_2D_ARRAY_SHADOW: c_uint = 0x8DC4;
    pub const SAMPLER_2D_MULTISAMPLE: c_uint = 0x9108;
    pub const SAMPLER_2D_MULTISAMPLE_ARRAY: c_uint = 0x910B;
    pub const SAMPLER_2D_RECT: c_uint = 0x8B63;
    pub const SAMPLER_2D_RECT_SHADOW: c_uint = 0x8B64;
    pub const SAMPLER_2D_SHADOW: c_uint = 0x8B62;
    pub const SAMPLER_3D: c_uint = 0x8B5F;
    pub const SAMPLER_BINDING: c_uint = 0x8919;
    pub const SAMPLER_BUFFER: c_uint = 0x8DC2;
    pub const SAMPLER_CUBE: c_uint = 0x8B60;
    pub const SAMPLER_CUBE_SHADOW: c_uint = 0x8DC5;
    pub const SAMPLES: c_uint = 0x80A9;
    pub const SAMPLES_PASSED: c_uint = 0x8914;
    pub const SAMPLE_ALPHA_TO_COVERAGE: c_uint = 0x809E;
    pub const SAMPLE_ALPHA_TO_ONE: c_uint = 0x809F;
    pub const SAMPLE_BUFFERS: c_uint = 0x80A8;
    pub const SAMPLE_COVERAGE: c_uint = 0x80A0;
    pub const SAMPLE_COVERAGE_INVERT: c_uint = 0x80AB;
    pub const SAMPLE_COVERAGE_VALUE: c_uint = 0x80AA;
    pub const SAMPLE_MASK: c_uint = 0x8E51;
    pub const SAMPLE_MASK_VALUE: c_uint = 0x8E52;
    pub const SAMPLE_POSITION: c_uint = 0x8E50;
    pub const SCISSOR_BIT: c_uint = 0x00080000;
    pub const SCISSOR_BOX: c_uint = 0x0C10;
    pub const SCISSOR_TEST: c_uint = 0x0C11;
    pub const SECONDARY_COLOR_ARRAY: c_uint = 0x845E;
    pub const SECONDARY_COLOR_ARRAY_BUFFER_BINDING: c_uint = 0x889C;
    pub const SECONDARY_COLOR_ARRAY_POINTER: c_uint = 0x845D;
    pub const SECONDARY_COLOR_ARRAY_SIZE: c_uint = 0x845A;
    pub const SECONDARY_COLOR_ARRAY_STRIDE: c_uint = 0x845C;
    pub const SECONDARY_COLOR_ARRAY_TYPE: c_uint = 0x845B;
    pub const SELECT: c_uint = 0x1C02;
    pub const SELECTION_BUFFER_POINTER: c_uint = 0x0DF3;
    pub const SELECTION_BUFFER_SIZE: c_uint = 0x0DF4;
    pub const SEPARATE_ATTRIBS: c_uint = 0x8C8D;
    pub const SEPARATE_SPECULAR_COLOR: c_uint = 0x81FA;
    pub const SET: c_uint = 0x150F;
    pub const SHADER_SOURCE_LENGTH: c_uint = 0x8B88;
    pub const SHADER_TYPE: c_uint = 0x8B4F;
    pub const SHADE_MODEL: c_uint = 0x0B54;
    pub const SHADING_LANGUAGE_VERSION: c_uint = 0x8B8C;
    pub const SHININESS: c_uint = 0x1601;
    pub const SHORT: c_uint = 0x1402;
    pub const SIGNALED: c_uint = 0x9119;
    pub const SIGNED_NORMALIZED: c_uint = 0x8F9C;
    pub const SINGLE_COLOR: c_uint = 0x81F9;
    pub const SLUMINANCE: c_uint = 0x8C46;
    pub const SLUMINANCE8: c_uint = 0x8C47;
    pub const SLUMINANCE8_ALPHA8: c_uint = 0x8C45;
    pub const SLUMINANCE_ALPHA: c_uint = 0x8C44;
    pub const SMOOTH: c_uint = 0x1D01;
    pub const SMOOTH_LINE_WIDTH_GRANULARITY: c_uint = 0x0B23;
    pub const SMOOTH_LINE_WIDTH_RANGE: c_uint = 0x0B22;
    pub const SMOOTH_POINT_SIZE_GRANULARITY: c_uint = 0x0B13;
    pub const SMOOTH_POINT_SIZE_RANGE: c_uint = 0x0B12;
    pub const SOURCE0_ALPHA: c_uint = 0x8588;
    pub const SOURCE0_RGB: c_uint = 0x8580;
    pub const SOURCE1_ALPHA: c_uint = 0x8589;
    pub const SOURCE1_RGB: c_uint = 0x8581;
    pub const SOURCE2_ALPHA: c_uint = 0x858A;
    pub const SOURCE2_RGB: c_uint = 0x8582;
    pub const SPECULAR: c_uint = 0x1202;
    pub const SPHERE_MAP: c_uint = 0x2402;
    pub const SPOT_CUTOFF: c_uint = 0x1206;
    pub const SPOT_DIRECTION: c_uint = 0x1204;
    pub const SPOT_EXPONENT: c_uint = 0x1205;
    pub const SRC0_ALPHA: c_uint = 0x8588;
    pub const SRC0_RGB: c_uint = 0x8580;
    pub const SRC1_ALPHA: c_uint = 0x8589;
    pub const SRC1_COLOR: c_uint = 0x88F9;
    pub const SRC1_RGB: c_uint = 0x8581;
    pub const SRC2_ALPHA: c_uint = 0x858A;
    pub const SRC2_RGB: c_uint = 0x8582;
    pub const SRC_ALPHA: c_uint = 0x0302;
    pub const SRC_ALPHA_SATURATE: c_uint = 0x0308;
    pub const SRC_COLOR: c_uint = 0x0300;
    pub const SRGB: c_uint = 0x8C40;
    pub const SRGB8: c_uint = 0x8C41;
    pub const SRGB8_ALPHA8: c_uint = 0x8C43;
    pub const SRGB_ALPHA: c_uint = 0x8C42;
    pub const STACK_OVERFLOW: c_uint = 0x0503;
    pub const STACK_UNDERFLOW: c_uint = 0x0504;
    pub const STATIC_COPY: c_uint = 0x88E6;
    pub const STATIC_DRAW: c_uint = 0x88E4;
    pub const STATIC_READ: c_uint = 0x88E5;
    pub const STENCIL: c_uint = 0x1802;
    pub const STENCIL_ATTACHMENT: c_uint = 0x8D20;
    pub const STENCIL_BACK_FAIL: c_uint = 0x8801;
    pub const STENCIL_BACK_FUNC: c_uint = 0x8800;
    pub const STENCIL_BACK_PASS_DEPTH_FAIL: c_uint = 0x8802;
    pub const STENCIL_BACK_PASS_DEPTH_PASS: c_uint = 0x8803;
    pub const STENCIL_BACK_REF: c_uint = 0x8CA3;
    pub const STENCIL_BACK_VALUE_MASK: c_uint = 0x8CA4;
    pub const STENCIL_BACK_WRITEMASK: c_uint = 0x8CA5;
    pub const STENCIL_BITS: c_uint = 0x0D57;
    pub const STENCIL_BUFFER_BIT: c_uint = 0x00000400;
    pub const STENCIL_CLEAR_VALUE: c_uint = 0x0B91;
    pub const STENCIL_FAIL: c_uint = 0x0B94;
    pub const STENCIL_FUNC: c_uint = 0x0B92;
    pub const STENCIL_INDEX: c_uint = 0x1901;
    pub const STENCIL_INDEX1: c_uint = 0x8D46;
    pub const STENCIL_INDEX16: c_uint = 0x8D49;
    pub const STENCIL_INDEX4: c_uint = 0x8D47;
    pub const STENCIL_INDEX8: c_uint = 0x8D48;
    pub const STENCIL_PASS_DEPTH_FAIL: c_uint = 0x0B95;
    pub const STENCIL_PASS_DEPTH_PASS: c_uint = 0x0B96;
    pub const STENCIL_REF: c_uint = 0x0B97;
    pub const STENCIL_TEST: c_uint = 0x0B90;
    pub const STENCIL_VALUE_MASK: c_uint = 0x0B93;
    pub const STENCIL_WRITEMASK: c_uint = 0x0B98;
    pub const STEREO: c_uint = 0x0C33;
    pub const STREAM_COPY: c_uint = 0x88E2;
    pub const STREAM_DRAW: c_uint = 0x88E0;
    pub const STREAM_READ: c_uint = 0x88E1;
    pub const SUBPIXEL_BITS: c_uint = 0x0D50;
    pub const SUBTRACT: c_uint = 0x84E7;
    pub const SYNC_CONDITION: c_uint = 0x9113;
    pub const SYNC_FENCE: c_uint = 0x9116;
    pub const SYNC_FLAGS: c_uint = 0x9115;
    pub const SYNC_FLUSH_COMMANDS_BIT: c_uint = 0x00000001;
    pub const SYNC_GPU_COMMANDS_COMPLETE: c_uint = 0x9117;
    pub const SYNC_STATUS: c_uint = 0x9114;
    pub const T: c_uint = 0x2001;
    pub const T2F_C3F_V3F: c_uint = 0x2A2A;
    pub const T2F_C4F_N3F_V3F: c_uint = 0x2A2C;
    pub const T2F_C4UB_V3F: c_uint = 0x2A29;
    pub const T2F_N3F_V3F: c_uint = 0x2A2B;
    pub const T2F_V3F: c_uint = 0x2A27;
    pub const T4F_C4F_N3F_V4F: c_uint = 0x2A2D;
    pub const T4F_V4F: c_uint = 0x2A28;
    pub const TEXTURE: c_uint = 0x1702;
    pub const TEXTURE0: c_uint = 0x84C0;
    pub const TEXTURE1: c_uint = 0x84C1;
    pub const TEXTURE10: c_uint = 0x84CA;
    pub const TEXTURE11: c_uint = 0x84CB;
    pub const TEXTURE12: c_uint = 0x84CC;
    pub const TEXTURE13: c_uint = 0x84CD;
    pub const TEXTURE14: c_uint = 0x84CE;
    pub const TEXTURE15: c_uint = 0x84CF;
    pub const TEXTURE16: c_uint = 0x84D0;
    pub const TEXTURE17: c_uint = 0x84D1;
    pub const TEXTURE18: c_uint = 0x84D2;
    pub const TEXTURE19: c_uint = 0x84D3;
    pub const TEXTURE2: c_uint = 0x84C2;
    pub const TEXTURE20: c_uint = 0x84D4;
    pub const TEXTURE21: c_uint = 0x84D5;
    pub const TEXTURE22: c_uint = 0x84D6;
    pub const TEXTURE23: c_uint = 0x84D7;
    pub const TEXTURE24: c_uint = 0x84D8;
    pub const TEXTURE25: c_uint = 0x84D9;
    pub const TEXTURE26: c_uint = 0x84DA;
    pub const TEXTURE27: c_uint = 0x84DB;
    pub const TEXTURE28: c_uint = 0x84DC;
    pub const TEXTURE29: c_uint = 0x84DD;
    pub const TEXTURE3: c_uint = 0x84C3;
    pub const TEXTURE30: c_uint = 0x84DE;
    pub const TEXTURE31: c_uint = 0x84DF;
    pub const TEXTURE4: c_uint = 0x84C4;
    pub const TEXTURE5: c_uint = 0x84C5;
    pub const TEXTURE6: c_uint = 0x84C6;
    pub const TEXTURE7: c_uint = 0x84C7;
    pub const TEXTURE8: c_uint = 0x84C8;
    pub const TEXTURE9: c_uint = 0x84C9;
    pub const TEXTURE_1D: c_uint = 0x0DE0;
    pub const TEXTURE_1D_ARRAY: c_uint = 0x8C18;
    pub const TEXTURE_2D: c_uint = 0x0DE1;
    pub const TEXTURE_2D_ARRAY: c_uint = 0x8C1A;
    pub const TEXTURE_2D_MULTISAMPLE: c_uint = 0x9100;
    pub const TEXTURE_2D_MULTISAMPLE_ARRAY: c_uint = 0x9102;
    pub const TEXTURE_3D: c_uint = 0x806F;
    pub const TEXTURE_ALPHA_SIZE: c_uint = 0x805F;
    pub const TEXTURE_ALPHA_TYPE: c_uint = 0x8C13;
    pub const TEXTURE_BASE_LEVEL: c_uint = 0x813C;
    pub const TEXTURE_BINDING_1D: c_uint = 0x8068;
    pub const TEXTURE_BINDING_1D_ARRAY: c_uint = 0x8C1C;
    pub const TEXTURE_BINDING_2D: c_uint = 0x8069;
    pub const TEXTURE_BINDING_2D_ARRAY: c_uint = 0x8C1D;
    pub const TEXTURE_BINDING_2D_MULTISAMPLE: c_uint = 0x9104;
    pub const TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY: c_uint = 0x9105;
    pub const TEXTURE_BINDING_3D: c_uint = 0x806A;
    pub const TEXTURE_BINDING_BUFFER: c_uint = 0x8C2C;
    pub const TEXTURE_BINDING_CUBE_MAP: c_uint = 0x8514;
    pub const TEXTURE_BINDING_RECTANGLE: c_uint = 0x84F6;
    pub const TEXTURE_BIT: c_uint = 0x00040000;
    pub const TEXTURE_BLUE_SIZE: c_uint = 0x805E;
    pub const TEXTURE_BLUE_TYPE: c_uint = 0x8C12;
    pub const TEXTURE_BORDER: c_uint = 0x1005;
    pub const TEXTURE_BORDER_COLOR: c_uint = 0x1004;
    pub const TEXTURE_BUFFER: c_uint = 0x8C2A;
    pub const TEXTURE_BUFFER_DATA_STORE_BINDING: c_uint = 0x8C2D;
    pub const TEXTURE_COMPARE_FUNC: c_uint = 0x884D;
    pub const TEXTURE_COMPARE_MODE: c_uint = 0x884C;
    pub const TEXTURE_COMPONENTS: c_uint = 0x1003;
    pub const TEXTURE_COMPRESSED: c_uint = 0x86A1;
    pub const TEXTURE_COMPRESSED_IMAGE_SIZE: c_uint = 0x86A0;
    pub const TEXTURE_COMPRESSION_HINT: c_uint = 0x84EF;
    pub const TEXTURE_COORD_ARRAY: c_uint = 0x8078;
    pub const TEXTURE_COORD_ARRAY_BUFFER_BINDING: c_uint = 0x889A;
    pub const TEXTURE_COORD_ARRAY_POINTER: c_uint = 0x8092;
    pub const TEXTURE_COORD_ARRAY_SIZE: c_uint = 0x8088;
    pub const TEXTURE_COORD_ARRAY_STRIDE: c_uint = 0x808A;
    pub const TEXTURE_COORD_ARRAY_TYPE: c_uint = 0x8089;
    pub const TEXTURE_CUBE_MAP: c_uint = 0x8513;
    pub const TEXTURE_CUBE_MAP_NEGATIVE_X: c_uint = 0x8516;
    pub const TEXTURE_CUBE_MAP_NEGATIVE_Y: c_uint = 0x8518;
    pub const TEXTURE_CUBE_MAP_NEGATIVE_Z: c_uint = 0x851A;
    pub const TEXTURE_CUBE_MAP_POSITIVE_X: c_uint = 0x8515;
    pub const TEXTURE_CUBE_MAP_POSITIVE_Y: c_uint = 0x8517;
    pub const TEXTURE_CUBE_MAP_POSITIVE_Z: c_uint = 0x8519;
    pub const TEXTURE_CUBE_MAP_SEAMLESS: c_uint = 0x884F;
    pub const TEXTURE_DEPTH: c_uint = 0x8071;
    pub const TEXTURE_DEPTH_SIZE: c_uint = 0x884A;
    pub const TEXTURE_DEPTH_TYPE: c_uint = 0x8C16;
    pub const TEXTURE_ENV: c_uint = 0x2300;
    pub const TEXTURE_ENV_COLOR: c_uint = 0x2201;
    pub const TEXTURE_ENV_MODE: c_uint = 0x2200;
    pub const TEXTURE_FILTER_CONTROL: c_uint = 0x8500;
    pub const TEXTURE_FIXED_SAMPLE_LOCATIONS: c_uint = 0x9107;
    pub const TEXTURE_GEN_MODE: c_uint = 0x2500;
    pub const TEXTURE_GEN_Q: c_uint = 0x0C63;
    pub const TEXTURE_GEN_R: c_uint = 0x0C62;
    pub const TEXTURE_GEN_S: c_uint = 0x0C60;
    pub const TEXTURE_GEN_T: c_uint = 0x0C61;
    pub const TEXTURE_GREEN_SIZE: c_uint = 0x805D;
    pub const TEXTURE_GREEN_TYPE: c_uint = 0x8C11;
    pub const TEXTURE_HEIGHT: c_uint = 0x1001;
    pub const TEXTURE_INTENSITY_SIZE: c_uint = 0x8061;
    pub const TEXTURE_INTENSITY_TYPE: c_uint = 0x8C15;
    pub const TEXTURE_INTERNAL_FORMAT: c_uint = 0x1003;
    pub const TEXTURE_LOD_BIAS: c_uint = 0x8501;
    pub const TEXTURE_LUMINANCE_SIZE: c_uint = 0x8060;
    pub const TEXTURE_LUMINANCE_TYPE: c_uint = 0x8C14;
    pub const TEXTURE_MAG_FILTER: c_uint = 0x2800;
    pub const TEXTURE_MATRIX: c_uint = 0x0BA8;
    pub const TEXTURE_MAX_LEVEL: c_uint = 0x813D;
    pub const TEXTURE_MAX_LOD: c_uint = 0x813B;
    pub const TEXTURE_MIN_FILTER: c_uint = 0x2801;
    pub const TEXTURE_MIN_LOD: c_uint = 0x813A;
    pub const TEXTURE_PRIORITY: c_uint = 0x8066;
    pub const TEXTURE_RECTANGLE: c_uint = 0x84F5;
    pub const TEXTURE_RED_SIZE: c_uint = 0x805C;
    pub const TEXTURE_RED_TYPE: c_uint = 0x8C10;
    pub const TEXTURE_RESIDENT: c_uint = 0x8067;
    pub const TEXTURE_SAMPLES: c_uint = 0x9106;
    pub const TEXTURE_SHARED_SIZE: c_uint = 0x8C3F;
    pub const TEXTURE_STACK_DEPTH: c_uint = 0x0BA5;
    pub const TEXTURE_STENCIL_SIZE: c_uint = 0x88F1;
    pub const TEXTURE_SWIZZLE_A: c_uint = 0x8E45;
    pub const TEXTURE_SWIZZLE_B: c_uint = 0x8E44;
    pub const TEXTURE_SWIZZLE_G: c_uint = 0x8E43;
    pub const TEXTURE_SWIZZLE_R: c_uint = 0x8E42;
    pub const TEXTURE_SWIZZLE_RGBA: c_uint = 0x8E46;
    pub const TEXTURE_WIDTH: c_uint = 0x1000;
    pub const TEXTURE_WRAP_R: c_uint = 0x8072;
    pub const TEXTURE_WRAP_S: c_uint = 0x2802;
    pub const TEXTURE_WRAP_T: c_uint = 0x2803;
    pub const TIMEOUT_EXPIRED: c_uint = 0x911B;
    pub const TIMEOUT_IGNORED: u64 = 0xFFFFFFFFFFFFFFFF;
    pub const TIMESTAMP: c_uint = 0x8E28;
    pub const TIME_ELAPSED: c_uint = 0x88BF;
    pub const TRANSFORM_BIT: c_uint = 0x00001000;
    pub const TRANSFORM_FEEDBACK_BUFFER: c_uint = 0x8C8E;
    pub const TRANSFORM_FEEDBACK_BUFFER_BINDING: c_uint = 0x8C8F;
    pub const TRANSFORM_FEEDBACK_BUFFER_MODE: c_uint = 0x8C7F;
    pub const TRANSFORM_FEEDBACK_BUFFER_SIZE: c_uint = 0x8C85;
    pub const TRANSFORM_FEEDBACK_BUFFER_START: c_uint = 0x8C84;
    pub const TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: c_uint = 0x8C88;
    pub const TRANSFORM_FEEDBACK_VARYINGS: c_uint = 0x8C83;
    pub const TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH: c_uint = 0x8C76;
    pub const TRANSPOSE_COLOR_MATRIX: c_uint = 0x84E6;
    pub const TRANSPOSE_MODELVIEW_MATRIX: c_uint = 0x84E3;
    pub const TRANSPOSE_PROJECTION_MATRIX: c_uint = 0x84E4;
    pub const TRANSPOSE_TEXTURE_MATRIX: c_uint = 0x84E5;
    pub const TRIANGLES: c_uint = 0x0004;
    pub const TRIANGLES_ADJACENCY: c_uint = 0x000C;
    pub const TRIANGLE_FAN: c_uint = 0x0006;
    pub const TRIANGLE_STRIP: c_uint = 0x0005;
    pub const TRIANGLE_STRIP_ADJACENCY: c_uint = 0x000D;
    pub const TRUE: c_uchar = 1;
    pub const UNIFORM_ARRAY_STRIDE: c_uint = 0x8A3C;
    pub const UNIFORM_BLOCK_ACTIVE_UNIFORMS: c_uint = 0x8A42;
    pub const UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: c_uint = 0x8A43;
    pub const UNIFORM_BLOCK_BINDING: c_uint = 0x8A3F;
    pub const UNIFORM_BLOCK_DATA_SIZE: c_uint = 0x8A40;
    pub const UNIFORM_BLOCK_INDEX: c_uint = 0x8A3A;
    pub const UNIFORM_BLOCK_NAME_LENGTH: c_uint = 0x8A41;
    pub const UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: c_uint = 0x8A46;
    pub const UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER: c_uint = 0x8A45;
    pub const UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: c_uint = 0x8A44;
    pub const UNIFORM_BUFFER: c_uint = 0x8A11;
    pub const UNIFORM_BUFFER_BINDING: c_uint = 0x8A28;
    pub const UNIFORM_BUFFER_OFFSET_ALIGNMENT: c_uint = 0x8A34;
    pub const UNIFORM_BUFFER_SIZE: c_uint = 0x8A2A;
    pub const UNIFORM_BUFFER_START: c_uint = 0x8A29;
    pub const UNIFORM_IS_ROW_MAJOR: c_uint = 0x8A3E;
    pub const UNIFORM_MATRIX_STRIDE: c_uint = 0x8A3D;
    pub const UNIFORM_NAME_LENGTH: c_uint = 0x8A39;
    pub const UNIFORM_OFFSET: c_uint = 0x8A3B;
    pub const UNIFORM_SIZE: c_uint = 0x8A38;
    pub const UNIFORM_TYPE: c_uint = 0x8A37;
    pub const UNPACK_ALIGNMENT: c_uint = 0x0CF5;
    pub const UNPACK_IMAGE_HEIGHT: c_uint = 0x806E;
    pub const UNPACK_LSB_FIRST: c_uint = 0x0CF1;
    pub const UNPACK_ROW_LENGTH: c_uint = 0x0CF2;
    pub const UNPACK_SKIP_IMAGES: c_uint = 0x806D;
    pub const UNPACK_SKIP_PIXELS: c_uint = 0x0CF4;
    pub const UNPACK_SKIP_ROWS: c_uint = 0x0CF3;
    pub const UNPACK_SWAP_BYTES: c_uint = 0x0CF0;
    pub const UNSIGNALED: c_uint = 0x9118;
    pub const UNSIGNED_BYTE: c_uint = 0x1401;
    pub const UNSIGNED_BYTE_2_3_3_REV: c_uint = 0x8362;
    pub const UNSIGNED_BYTE_3_3_2: c_uint = 0x8032;
    pub const UNSIGNED_INT: c_uint = 0x1405;
    pub const UNSIGNED_INT_10F_11F_11F_REV: c_uint = 0x8C3B;
    pub const UNSIGNED_INT_10_10_10_2: c_uint = 0x8036;
    pub const UNSIGNED_INT_24_8: c_uint = 0x84FA;
    pub const UNSIGNED_INT_2_10_10_10_REV: c_uint = 0x8368;
    pub const UNSIGNED_INT_5_9_9_9_REV: c_uint = 0x8C3E;
    pub const UNSIGNED_INT_8_8_8_8: c_uint = 0x8035;
    pub const UNSIGNED_INT_8_8_8_8_REV: c_uint = 0x8367;
    pub const UNSIGNED_INT_SAMPLER_1D: c_uint = 0x8DD1;
    pub const UNSIGNED_INT_SAMPLER_1D_ARRAY: c_uint = 0x8DD6;
    pub const UNSIGNED_INT_SAMPLER_2D: c_uint = 0x8DD2;
    pub const UNSIGNED_INT_SAMPLER_2D_ARRAY: c_uint = 0x8DD7;
    pub const UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE: c_uint = 0x910A;
    pub const UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY: c_uint = 0x910D;
    pub const UNSIGNED_INT_SAMPLER_2D_RECT: c_uint = 0x8DD5;
    pub const UNSIGNED_INT_SAMPLER_3D: c_uint = 0x8DD3;
    pub const UNSIGNED_INT_SAMPLER_BUFFER: c_uint = 0x8DD8;
    pub const UNSIGNED_INT_SAMPLER_CUBE: c_uint = 0x8DD4;
    pub const UNSIGNED_INT_VEC2: c_uint = 0x8DC6;
    pub const UNSIGNED_INT_VEC3: c_uint = 0x8DC7;
    pub const UNSIGNED_INT_VEC4: c_uint = 0x8DC8;
    pub const UNSIGNED_NORMALIZED: c_uint = 0x8C17;
    pub const UNSIGNED_SHORT: c_uint = 0x1403;
    pub const UNSIGNED_SHORT_1_5_5_5_REV: c_uint = 0x8366;
    pub const UNSIGNED_SHORT_4_4_4_4: c_uint = 0x8033;
    pub const UNSIGNED_SHORT_4_4_4_4_REV: c_uint = 0x8365;
    pub const UNSIGNED_SHORT_5_5_5_1: c_uint = 0x8034;
    pub const UNSIGNED_SHORT_5_6_5: c_uint = 0x8363;
    pub const UNSIGNED_SHORT_5_6_5_REV: c_uint = 0x8364;
    pub const UPPER_LEFT: c_uint = 0x8CA2;
    pub const V2F: c_uint = 0x2A20;
    pub const V3F: c_uint = 0x2A21;
    pub const VALIDATE_STATUS: c_uint = 0x8B83;
    pub const VENDOR: c_uint = 0x1F00;
    pub const VERSION: c_uint = 0x1F02;
    pub const VERTEX_ARRAY: c_uint = 0x8074;
    pub const VERTEX_ARRAY_BINDING: c_uint = 0x85B5;
    pub const VERTEX_ARRAY_BUFFER_BINDING: c_uint = 0x8896;
    pub const VERTEX_ARRAY_POINTER: c_uint = 0x808E;
    pub const VERTEX_ARRAY_SIZE: c_uint = 0x807A;
    pub const VERTEX_ARRAY_STRIDE: c_uint = 0x807C;
    pub const VERTEX_ARRAY_TYPE: c_uint = 0x807B;
    pub const VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: c_uint = 0x889F;
    pub const VERTEX_ATTRIB_ARRAY_DIVISOR: c_uint = 0x88FE;
    pub const VERTEX_ATTRIB_ARRAY_ENABLED: c_uint = 0x8622;
    pub const VERTEX_ATTRIB_ARRAY_INTEGER: c_uint = 0x88FD;
    pub const VERTEX_ATTRIB_ARRAY_NORMALIZED: c_uint = 0x886A;
    pub const VERTEX_ATTRIB_ARRAY_POINTER: c_uint = 0x8645;
    pub const VERTEX_ATTRIB_ARRAY_SIZE: c_uint = 0x8623;
    pub const VERTEX_ATTRIB_ARRAY_STRIDE: c_uint = 0x8624;
    pub const VERTEX_ATTRIB_ARRAY_TYPE: c_uint = 0x8625;
    pub const VERTEX_PROGRAM_POINT_SIZE: c_uint = 0x8642;
    pub const VERTEX_PROGRAM_TWO_SIDE: c_uint = 0x8643;
    pub const VERTEX_SHADER: c_uint = 0x8B31;
    pub const VIEWPORT: c_uint = 0x0BA2;
    pub const VIEWPORT_BIT: c_uint = 0x00000800;
    pub const WAIT_FAILED: c_uint = 0x911D;
    pub const WEIGHT_ARRAY_BUFFER_BINDING: c_uint = 0x889E;
    pub const WRITE_ONLY: c_uint = 0x88B9;
    pub const XOR: c_uint = 0x1506;
    pub const ZERO: c_uint = 0;
    pub const ZOOM_X: c_uint = 0x0D16;
    pub const ZOOM_Y: c_uint = 0x0D17;
}

pub mod functions {
    #![allow(non_snake_case, unused_variables, dead_code, unused_imports)]

    use std::mem::transmute;
    use std::os::raw::*;
    use super::*;
    use super::types::*;

    macro_rules! func {
        ($fun:ident, $ret:ty, $($name:ident: $typ:ty),*) => {
            #[inline] pub unsafe fn $fun($($name: $typ),*) -> $ret {
                transmute::<_, extern "system" fn($($typ),*) -> $ret>(storage::$fun.ptr)($($name),*)
            }
        }
    }


     func!(Accum, (), op: GLenum, value: GLfloat);
     func!(ActiveTexture, (), texture: GLenum);
     func!(AlphaFunc, (), func: GLenum, ref_: GLfloat);
     func!(AreTexturesResident, GLboolean, n: GLsizei, textures: *const GLuint, residences: *mut GLboolean);
     func!(ArrayElement, (), i: GLint);
     func!(AttachShader, (), program: GLuint, shader: GLuint);
     func!(Begin, (), mode: GLenum);
     func!(BeginConditionalRender, (), id: GLuint, mode: GLenum);
     func!(BeginQuery, (), target: GLenum, id: GLuint);
     func!(BeginTransformFeedback, (), primitiveMode: GLenum);
     func!(BindAttribLocation, (), program: GLuint, index: GLuint, name: *const GLchar);
     func!(BindBuffer, (), target: GLenum, buffer: GLuint);
     func!(BindBufferBase, (), target: GLenum, index: GLuint, buffer: GLuint);
     func!(BindBufferRange, (), target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr);
     func!(BindFragDataLocation, (), program: GLuint, color: GLuint, name: *const GLchar);
     func!(BindFragDataLocationIndexed, (), program: GLuint, colorNumber: GLuint, index: GLuint, name: *const GLchar);
     func!(BindFramebuffer, (), target: GLenum, framebuffer: GLuint);
     func!(BindRenderbuffer, (), target: GLenum, renderbuffer: GLuint);
     func!(BindSampler, (), unit: GLuint, sampler: GLuint);
     func!(BindTexture, (), target: GLenum, texture: GLuint);
     func!(BindVertexArray, (), array: GLuint);
     func!(Bitmap, (), width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: *const GLubyte);
     func!(BlendColor, (), red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat);
     func!(BlendEquation, (), mode: GLenum);
     func!(BlendEquationSeparate, (), modeRGB: GLenum, modeAlpha: GLenum);
     func!(BlendFunc, (), sfactor: GLenum, dfactor: GLenum);
     func!(BlendFuncSeparate, (), sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum);
     func!(BlitFramebuffer, (), srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum);
     func!(BufferData, (), target: GLenum, size: GLsizeiptr, data: *const c_void, usage: GLenum);
     func!(BufferSubData, (), target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *const c_void);
     func!(CallList, (), list: GLuint);
     func!(CallLists, (), n: GLsizei, type_: GLenum, lists: *const c_void);
     func!(CheckFramebufferStatus, GLenum, target: GLenum);
     func!(ClampColor, (), target: GLenum, clamp: GLenum);
     func!(Clear, (), mask: GLbitfield);
     func!(ClearAccum, (), red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat);
     func!(ClearBufferfi, (), buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint);
     func!(ClearBufferfv, (), buffer: GLenum, drawbuffer: GLint, value: *const GLfloat);
     func!(ClearBufferiv, (), buffer: GLenum, drawbuffer: GLint, value: *const GLint);
     func!(ClearBufferuiv, (), buffer: GLenum, drawbuffer: GLint, value: *const GLuint);
     func!(ClearColor, (), red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat);
     func!(ClearDepth, (), depth: GLdouble);
     func!(ClearIndex, (), c: GLfloat);
     func!(ClearStencil, (), s: GLint);
     func!(ClientActiveTexture, (), texture: GLenum);
     func!(ClientWaitSync, GLenum, sync: GLsync, flags: GLbitfield, timeout: GLuint64);
     func!(ClipPlane, (), plane: GLenum, equation: *const GLdouble);
     func!(Color3b, (), red: GLbyte, green: GLbyte, blue: GLbyte);
     func!(Color3bv, (), v: *const GLbyte);
     func!(Color3d, (), red: GLdouble, green: GLdouble, blue: GLdouble);
     func!(Color3dv, (), v: *const GLdouble);
     func!(Color3f, (), red: GLfloat, green: GLfloat, blue: GLfloat);
     func!(Color3fv, (), v: *const GLfloat);
     func!(Color3i, (), red: GLint, green: GLint, blue: GLint);
     func!(Color3iv, (), v: *const GLint);
     func!(Color3s, (), red: GLshort, green: GLshort, blue: GLshort);
     func!(Color3sv, (), v: *const GLshort);
     func!(Color3ub, (), red: GLubyte, green: GLubyte, blue: GLubyte);
     func!(Color3ubv, (), v: *const GLubyte);
     func!(Color3ui, (), red: GLuint, green: GLuint, blue: GLuint);
     func!(Color3uiv, (), v: *const GLuint);
     func!(Color3us, (), red: GLushort, green: GLushort, blue: GLushort);
     func!(Color3usv, (), v: *const GLushort);
     func!(Color4b, (), red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte);
     func!(Color4bv, (), v: *const GLbyte);
     func!(Color4d, (), red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble);
     func!(Color4dv, (), v: *const GLdouble);
     func!(Color4f, (), red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat);
     func!(Color4fv, (), v: *const GLfloat);
     func!(Color4i, (), red: GLint, green: GLint, blue: GLint, alpha: GLint);
     func!(Color4iv, (), v: *const GLint);
     func!(Color4s, (), red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort);
     func!(Color4sv, (), v: *const GLshort);
     func!(Color4ub, (), red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte);
     func!(Color4ubv, (), v: *const GLubyte);
     func!(Color4ui, (), red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint);
     func!(Color4uiv, (), v: *const GLuint);
     func!(Color4us, (), red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort);
     func!(Color4usv, (), v: *const GLushort);
     func!(ColorMask, (), red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean);
     func!(ColorMaski, (), index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean);
     func!(ColorMaterial, (), face: GLenum, mode: GLenum);
     func!(ColorP3ui, (), type_: GLenum, color: GLuint);
     func!(ColorP3uiv, (), type_: GLenum, color: *const GLuint);
     func!(ColorP4ui, (), type_: GLenum, color: GLuint);
     func!(ColorP4uiv, (), type_: GLenum, color: *const GLuint);
     func!(ColorPointer, (), size: GLint, type_: GLenum, stride: GLsizei, pointer: *const c_void);
     func!(CompileShader, (), shader: GLuint);
     func!(CompressedTexImage1D, (), target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: *const c_void);
     func!(CompressedTexImage2D, (), target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: *const c_void);
     func!(CompressedTexImage3D, (), target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *const c_void);
     func!(CompressedTexSubImage1D, (), target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *const c_void);
     func!(CompressedTexSubImage2D, (), target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *const c_void);
     func!(CompressedTexSubImage3D, (), target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *const c_void);
     func!(CopyBufferSubData, (), readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr);
     func!(CopyPixels, (), x: GLint, y: GLint, width: GLsizei, height: GLsizei, type_: GLenum);
     func!(CopyTexImage1D, (), target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint);
     func!(CopyTexImage2D, (), target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint);
     func!(CopyTexSubImage1D, (), target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei);
     func!(CopyTexSubImage2D, (), target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei);
     func!(CopyTexSubImage3D, (), target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei);
     func!(CreateProgram, GLuint, );
     func!(CreateShader, GLuint, type_: GLenum);
     func!(CullFace, (), mode: GLenum);
     func!(DeleteBuffers, (), n: GLsizei, buffers: *const GLuint);
     func!(DeleteFramebuffers, (), n: GLsizei, framebuffers: *const GLuint);
     func!(DeleteLists, (), list: GLuint, range: GLsizei);
     func!(DeleteProgram, (), program: GLuint);
     func!(DeleteQueries, (), n: GLsizei, ids: *const GLuint);
     func!(DeleteRenderbuffers, (), n: GLsizei, renderbuffers: *const GLuint);
     func!(DeleteSamplers, (), count: GLsizei, samplers: *const GLuint);
     func!(DeleteShader, (), shader: GLuint);
     func!(DeleteSync, (), sync: GLsync);
     func!(DeleteTextures, (), n: GLsizei, textures: *const GLuint);
     func!(DeleteVertexArrays, (), n: GLsizei, arrays: *const GLuint);
     func!(DepthFunc, (), func: GLenum);
     func!(DepthMask, (), flag: GLboolean);
     func!(DepthRange, (), n: GLdouble, f: GLdouble);
     func!(DetachShader, (), program: GLuint, shader: GLuint);
     func!(Disable, (), cap: GLenum);
     func!(DisableClientState, (), array: GLenum);
     func!(DisableVertexAttribArray, (), index: GLuint);
     func!(Disablei, (), target: GLenum, index: GLuint);
     func!(DrawArrays, (), mode: GLenum, first: GLint, count: GLsizei);
     func!(DrawArraysInstanced, (), mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei);
     func!(DrawBuffer, (), buf: GLenum);
     func!(DrawBuffers, (), n: GLsizei, bufs: *const GLenum);
     func!(DrawElements, (), mode: GLenum, count: GLsizei, type_: GLenum, indices: *const c_void);
     func!(DrawElementsBaseVertex, (), mode: GLenum, count: GLsizei, type_: GLenum, indices: *const c_void, basevertex: GLint);
     func!(DrawElementsInstanced, (), mode: GLenum, count: GLsizei, type_: GLenum, indices: *const c_void, instancecount: GLsizei);
     func!(DrawElementsInstancedBaseVertex, (), mode: GLenum, count: GLsizei, type_: GLenum, indices: *const c_void, instancecount: GLsizei, basevertex: GLint);
     func!(DrawPixels, (), width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *const c_void);
     func!(DrawRangeElements, (), mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_: GLenum, indices: *const c_void);
     func!(DrawRangeElementsBaseVertex, (), mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_: GLenum, indices: *const c_void, basevertex: GLint);
     func!(EdgeFlag, (), flag: GLboolean);
     func!(EdgeFlagPointer, (), stride: GLsizei, pointer: *const c_void);
     func!(EdgeFlagv, (), flag: *const GLboolean);
     func!(Enable, (), cap: GLenum);
     func!(EnableClientState, (), array: GLenum);
     func!(EnableVertexAttribArray, (), index: GLuint);
     func!(Enablei, (), target: GLenum, index: GLuint);
     func!(End, (), );
     func!(EndConditionalRender, (), );
     func!(EndList, (), );
     func!(EndQuery, (), target: GLenum);
     func!(EndTransformFeedback, (), );
     func!(EvalCoord1d, (), u: GLdouble);
     func!(EvalCoord1dv, (), u: *const GLdouble);
     func!(EvalCoord1f, (), u: GLfloat);
     func!(EvalCoord1fv, (), u: *const GLfloat);
     func!(EvalCoord2d, (), u: GLdouble, v: GLdouble);
     func!(EvalCoord2dv, (), u: *const GLdouble);
     func!(EvalCoord2f, (), u: GLfloat, v: GLfloat);
     func!(EvalCoord2fv, (), u: *const GLfloat);
     func!(EvalMesh1, (), mode: GLenum, i1: GLint, i2: GLint);
     func!(EvalMesh2, (), mode: GLenum, i1: GLint, i2: GLint, j1: GLint, j2: GLint);
     func!(EvalPoint1, (), i: GLint);
     func!(EvalPoint2, (), i: GLint, j: GLint);
     func!(FeedbackBuffer, (), size: GLsizei, type_: GLenum, buffer: *mut GLfloat);
     func!(FenceSync, GLsync, condition: GLenum, flags: GLbitfield);
     func!(Finish, (), );
     func!(Flush, (), );
     func!(FlushMappedBufferRange, (), target: GLenum, offset: GLintptr, length: GLsizeiptr);
     func!(FogCoordPointer, (), type_: GLenum, stride: GLsizei, pointer: *const c_void);
     func!(FogCoordd, (), coord: GLdouble);
     func!(FogCoorddv, (), coord: *const GLdouble);
     func!(FogCoordf, (), coord: GLfloat);
     func!(FogCoordfv, (), coord: *const GLfloat);
     func!(Fogf, (), pname: GLenum, param: GLfloat);
     func!(Fogfv, (), pname: GLenum, params: *const GLfloat);
     func!(Fogi, (), pname: GLenum, param: GLint);
     func!(Fogiv, (), pname: GLenum, params: *const GLint);
     func!(FramebufferRenderbuffer, (), target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint);
     func!(FramebufferTexture, (), target: GLenum, attachment: GLenum, texture: GLuint, level: GLint);
     func!(FramebufferTexture1D, (), target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint);
     func!(FramebufferTexture2D, (), target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint);
     func!(FramebufferTexture3D, (), target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint);
     func!(FramebufferTextureLayer, (), target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint);
     func!(FrontFace, (), mode: GLenum);
     func!(Frustum, (), left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble);
     func!(GenBuffers, (), n: GLsizei, buffers: *mut GLuint);
     func!(GenFramebuffers, (), n: GLsizei, framebuffers: *mut GLuint);
     func!(GenLists, GLuint, range: GLsizei);
     func!(GenQueries, (), n: GLsizei, ids: *mut GLuint);
     func!(GenRenderbuffers, (), n: GLsizei, renderbuffers: *mut GLuint);
     func!(GenSamplers, (), count: GLsizei, samplers: *mut GLuint);
     func!(GenTextures, (), n: GLsizei, textures: *mut GLuint);
     func!(GenVertexArrays, (), n: GLsizei, arrays: *mut GLuint);
     func!(GenerateMipmap, (), target: GLenum);
     func!(GetActiveAttrib, (), program: GLuint, index: GLuint, bufSize: GLsizei, length: *mut GLsizei, size: *mut GLint, type_: *mut GLenum, name: *mut GLchar);
     func!(GetActiveUniform, (), program: GLuint, index: GLuint, bufSize: GLsizei, length: *mut GLsizei, size: *mut GLint, type_: *mut GLenum, name: *mut GLchar);
     func!(GetActiveUniformBlockName, (), program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: *mut GLsizei, uniformBlockName: *mut GLchar);
     func!(GetActiveUniformBlockiv, (), program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: *mut GLint);
     func!(GetActiveUniformName, (), program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: *mut GLsizei, uniformName: *mut GLchar);
     func!(GetActiveUniformsiv, (), program: GLuint, uniformCount: GLsizei, uniformIndices: *const GLuint, pname: GLenum, params: *mut GLint);
     func!(GetAttachedShaders, (), program: GLuint, maxCount: GLsizei, count: *mut GLsizei, shaders: *mut GLuint);
     func!(GetAttribLocation, GLint, program: GLuint, name: *const GLchar);
     func!(GetBooleani_v, (), target: GLenum, index: GLuint, data: *mut GLboolean);
     func!(GetBooleanv, (), pname: GLenum, data: *mut GLboolean);
     func!(GetBufferParameteri64v, (), target: GLenum, pname: GLenum, params: *mut GLint64);
     func!(GetBufferParameteriv, (), target: GLenum, pname: GLenum, params: *mut GLint);
     func!(GetBufferPointerv, (), target: GLenum, pname: GLenum, params: *mut *mut c_void);
     func!(GetBufferSubData, (), target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *mut c_void);
     func!(GetClipPlane, (), plane: GLenum, equation: *mut GLdouble);
     func!(GetCompressedTexImage, (), target: GLenum, level: GLint, img: *mut c_void);
     func!(GetDoublev, (), pname: GLenum, data: *mut GLdouble);
     func!(GetError, GLenum, );
     func!(GetFloatv, (), pname: GLenum, data: *mut GLfloat);
     func!(GetFragDataIndex, GLint, program: GLuint, name: *const GLchar);
     func!(GetFragDataLocation, GLint, program: GLuint, name: *const GLchar);
     func!(GetFramebufferAttachmentParameteriv, (), target: GLenum, attachment: GLenum, pname: GLenum, params: *mut GLint);
     func!(GetInteger64i_v, (), target: GLenum, index: GLuint, data: *mut GLint64);
     func!(GetInteger64v, (), pname: GLenum, data: *mut GLint64);
     func!(GetIntegeri_v, (), target: GLenum, index: GLuint, data: *mut GLint);
     func!(GetIntegerv, (), pname: GLenum, data: *mut GLint);
     func!(GetLightfv, (), light: GLenum, pname: GLenum, params: *mut GLfloat);
     func!(GetLightiv, (), light: GLenum, pname: GLenum, params: *mut GLint);
     func!(GetMapdv, (), target: GLenum, query: GLenum, v: *mut GLdouble);
     func!(GetMapfv, (), target: GLenum, query: GLenum, v: *mut GLfloat);
     func!(GetMapiv, (), target: GLenum, query: GLenum, v: *mut GLint);
     func!(GetMaterialfv, (), face: GLenum, pname: GLenum, params: *mut GLfloat);
     func!(GetMaterialiv, (), face: GLenum, pname: GLenum, params: *mut GLint);
     func!(GetMultisamplefv, (), pname: GLenum, index: GLuint, val: *mut GLfloat);
     func!(GetPixelMapfv, (), map: GLenum, values: *mut GLfloat);
     func!(GetPixelMapuiv, (), map: GLenum, values: *mut GLuint);
     func!(GetPixelMapusv, (), map: GLenum, values: *mut GLushort);
     func!(GetPointerv, (), pname: GLenum, params: *mut *mut c_void);
     func!(GetPolygonStipple, (), mask: *mut GLubyte);
     func!(GetProgramInfoLog, (), program: GLuint, bufSize: GLsizei, length: *mut GLsizei, infoLog: *mut GLchar);
     func!(GetProgramiv, (), program: GLuint, pname: GLenum, params: *mut GLint);
     func!(GetQueryObjecti64v, (), id: GLuint, pname: GLenum, params: *mut GLint64);
     func!(GetQueryObjectiv, (), id: GLuint, pname: GLenum, params: *mut GLint);
     func!(GetQueryObjectui64v, (), id: GLuint, pname: GLenum, params: *mut GLuint64);
     func!(GetQueryObjectuiv, (), id: GLuint, pname: GLenum, params: *mut GLuint);
     func!(GetQueryiv, (), target: GLenum, pname: GLenum, params: *mut GLint);
     func!(GetRenderbufferParameteriv, (), target: GLenum, pname: GLenum, params: *mut GLint);
     func!(GetSamplerParameterIiv, (), sampler: GLuint, pname: GLenum, params: *mut GLint);
     func!(GetSamplerParameterIuiv, (), sampler: GLuint, pname: GLenum, params: *mut GLuint);
     func!(GetSamplerParameterfv, (), sampler: GLuint, pname: GLenum, params: *mut GLfloat);
     func!(GetSamplerParameteriv, (), sampler: GLuint, pname: GLenum, params: *mut GLint);
     func!(GetShaderInfoLog, (), shader: GLuint, bufSize: GLsizei, length: *mut GLsizei, infoLog: *mut GLchar);
     func!(GetShaderSource, (), shader: GLuint, bufSize: GLsizei, length: *mut GLsizei, source: *mut GLchar);
     func!(GetShaderiv, (), shader: GLuint, pname: GLenum, params: *mut GLint);
     func!(GetString, *const GLubyte, name: GLenum);
     func!(GetStringi, *const GLubyte, name: GLenum, index: GLuint);
     func!(GetSynciv, (), sync: GLsync, pname: GLenum, count: GLsizei, length: *mut GLsizei, values: *mut GLint);
     func!(GetTexEnvfv, (), target: GLenum, pname: GLenum, params: *mut GLfloat);
     func!(GetTexEnviv, (), target: GLenum, pname: GLenum, params: *mut GLint);
     func!(GetTexGendv, (), coord: GLenum, pname: GLenum, params: *mut GLdouble);
     func!(GetTexGenfv, (), coord: GLenum, pname: GLenum, params: *mut GLfloat);
     func!(GetTexGeniv, (), coord: GLenum, pname: GLenum, params: *mut GLint);
     func!(GetTexImage, (), target: GLenum, level: GLint, format: GLenum, type_: GLenum, pixels: *mut c_void);
     func!(GetTexLevelParameterfv, (), target: GLenum, level: GLint, pname: GLenum, params: *mut GLfloat);
     func!(GetTexLevelParameteriv, (), target: GLenum, level: GLint, pname: GLenum, params: *mut GLint);
     func!(GetTexParameterIiv, (), target: GLenum, pname: GLenum, params: *mut GLint);
     func!(GetTexParameterIuiv, (), target: GLenum, pname: GLenum, params: *mut GLuint);
     func!(GetTexParameterfv, (), target: GLenum, pname: GLenum, params: *mut GLfloat);
     func!(GetTexParameteriv, (), target: GLenum, pname: GLenum, params: *mut GLint);
     func!(GetTransformFeedbackVarying, (), program: GLuint, index: GLuint, bufSize: GLsizei, length: *mut GLsizei, size: *mut GLsizei, type_: *mut GLenum, name: *mut GLchar);
     func!(GetUniformBlockIndex, GLuint, program: GLuint, uniformBlockName: *const GLchar);
     func!(GetUniformIndices, (), program: GLuint, uniformCount: GLsizei, uniformNames: *const *const GLchar, uniformIndices: *mut GLuint);
     func!(GetUniformLocation, GLint, program: GLuint, name: *const GLchar);
     func!(GetUniformfv, (), program: GLuint, location: GLint, params: *mut GLfloat);
     func!(GetUniformiv, (), program: GLuint, location: GLint, params: *mut GLint);
     func!(GetUniformuiv, (), program: GLuint, location: GLint, params: *mut GLuint);
     func!(GetVertexAttribIiv, (), index: GLuint, pname: GLenum, params: *mut GLint);
     func!(GetVertexAttribIuiv, (), index: GLuint, pname: GLenum, params: *mut GLuint);
     func!(GetVertexAttribPointerv, (), index: GLuint, pname: GLenum, pointer: *mut *mut c_void);
     func!(GetVertexAttribdv, (), index: GLuint, pname: GLenum, params: *mut GLdouble);
     func!(GetVertexAttribfv, (), index: GLuint, pname: GLenum, params: *mut GLfloat);
     func!(GetVertexAttribiv, (), index: GLuint, pname: GLenum, params: *mut GLint);
     func!(Hint, (), target: GLenum, mode: GLenum);
     func!(IndexMask, (), mask: GLuint);
     func!(IndexPointer, (), type_: GLenum, stride: GLsizei, pointer: *const c_void);
     func!(Indexd, (), c: GLdouble);
     func!(Indexdv, (), c: *const GLdouble);
     func!(Indexf, (), c: GLfloat);
     func!(Indexfv, (), c: *const GLfloat);
     func!(Indexi, (), c: GLint);
     func!(Indexiv, (), c: *const GLint);
     func!(Indexs, (), c: GLshort);
     func!(Indexsv, (), c: *const GLshort);
     func!(Indexub, (), c: GLubyte);
     func!(Indexubv, (), c: *const GLubyte);
     func!(InitNames, (), );
     func!(InterleavedArrays, (), format: GLenum, stride: GLsizei, pointer: *const c_void);
     func!(IsBuffer, GLboolean, buffer: GLuint);
     func!(IsEnabled, GLboolean, cap: GLenum);
     func!(IsEnabledi, GLboolean, target: GLenum, index: GLuint);
     func!(IsFramebuffer, GLboolean, framebuffer: GLuint);
     func!(IsList, GLboolean, list: GLuint);
     func!(IsProgram, GLboolean, program: GLuint);
     func!(IsQuery, GLboolean, id: GLuint);
     func!(IsRenderbuffer, GLboolean, renderbuffer: GLuint);
     func!(IsSampler, GLboolean, sampler: GLuint);
     func!(IsShader, GLboolean, shader: GLuint);
     func!(IsSync, GLboolean, sync: GLsync);
     func!(IsTexture, GLboolean, texture: GLuint);
     func!(IsVertexArray, GLboolean, array: GLuint);
     func!(LightModelf, (), pname: GLenum, param: GLfloat);
     func!(LightModelfv, (), pname: GLenum, params: *const GLfloat);
     func!(LightModeli, (), pname: GLenum, param: GLint);
     func!(LightModeliv, (), pname: GLenum, params: *const GLint);
     func!(Lightf, (), light: GLenum, pname: GLenum, param: GLfloat);
     func!(Lightfv, (), light: GLenum, pname: GLenum, params: *const GLfloat);
     func!(Lighti, (), light: GLenum, pname: GLenum, param: GLint);
     func!(Lightiv, (), light: GLenum, pname: GLenum, params: *const GLint);
     func!(LineStipple, (), factor: GLint, pattern: GLushort);
     func!(LineWidth, (), width: GLfloat);
     func!(LinkProgram, (), program: GLuint);
     func!(ListBase, (), base: GLuint);
     func!(LoadIdentity, (), );
     func!(LoadMatrixd, (), m: *const GLdouble);
     func!(LoadMatrixf, (), m: *const GLfloat);
     func!(LoadName, (), name: GLuint);
     func!(LoadTransposeMatrixd, (), m: *const GLdouble);
     func!(LoadTransposeMatrixf, (), m: *const GLfloat);
     func!(LogicOp, (), opcode: GLenum);
     func!(Map1d, (), target: GLenum, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: *const GLdouble);
     func!(Map1f, (), target: GLenum, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: *const GLfloat);
     func!(Map2d, (), target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: *const GLdouble);
     func!(Map2f, (), target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: *const GLfloat);
     func!(MapBuffer, *mut c_void, target: GLenum, access: GLenum);
     func!(MapBufferRange, *mut c_void, target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield);
     func!(MapGrid1d, (), un: GLint, u1: GLdouble, u2: GLdouble);
     func!(MapGrid1f, (), un: GLint, u1: GLfloat, u2: GLfloat);
     func!(MapGrid2d, (), un: GLint, u1: GLdouble, u2: GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble);
     func!(MapGrid2f, (), un: GLint, u1: GLfloat, u2: GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat);
     func!(Materialf, (), face: GLenum, pname: GLenum, param: GLfloat);
     func!(Materialfv, (), face: GLenum, pname: GLenum, params: *const GLfloat);
     func!(Materiali, (), face: GLenum, pname: GLenum, param: GLint);
     func!(Materialiv, (), face: GLenum, pname: GLenum, params: *const GLint);
     func!(MatrixMode, (), mode: GLenum);
     func!(MultMatrixd, (), m: *const GLdouble);
     func!(MultMatrixf, (), m: *const GLfloat);
     func!(MultTransposeMatrixd, (), m: *const GLdouble);
     func!(MultTransposeMatrixf, (), m: *const GLfloat);
     func!(MultiDrawArrays, (), mode: GLenum, first: *const GLint, count: *const GLsizei, drawcount: GLsizei);
     func!(MultiDrawElements, (), mode: GLenum, count: *const GLsizei, type_: GLenum, indices: *const *const c_void, drawcount: GLsizei);
     func!(MultiDrawElementsBaseVertex, (), mode: GLenum, count: *const GLsizei, type_: GLenum, indices: *const *const c_void, drawcount: GLsizei, basevertex: *const GLint);
     func!(MultiTexCoord1d, (), target: GLenum, s: GLdouble);
     func!(MultiTexCoord1dv, (), target: GLenum, v: *const GLdouble);
     func!(MultiTexCoord1f, (), target: GLenum, s: GLfloat);
     func!(MultiTexCoord1fv, (), target: GLenum, v: *const GLfloat);
     func!(MultiTexCoord1i, (), target: GLenum, s: GLint);
     func!(MultiTexCoord1iv, (), target: GLenum, v: *const GLint);
     func!(MultiTexCoord1s, (), target: GLenum, s: GLshort);
     func!(MultiTexCoord1sv, (), target: GLenum, v: *const GLshort);
     func!(MultiTexCoord2d, (), target: GLenum, s: GLdouble, t: GLdouble);
     func!(MultiTexCoord2dv, (), target: GLenum, v: *const GLdouble);
     func!(MultiTexCoord2f, (), target: GLenum, s: GLfloat, t: GLfloat);
     func!(MultiTexCoord2fv, (), target: GLenum, v: *const GLfloat);
     func!(MultiTexCoord2i, (), target: GLenum, s: GLint, t: GLint);
     func!(MultiTexCoord2iv, (), target: GLenum, v: *const GLint);
     func!(MultiTexCoord2s, (), target: GLenum, s: GLshort, t: GLshort);
     func!(MultiTexCoord2sv, (), target: GLenum, v: *const GLshort);
     func!(MultiTexCoord3d, (), target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble);
     func!(MultiTexCoord3dv, (), target: GLenum, v: *const GLdouble);
     func!(MultiTexCoord3f, (), target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat);
     func!(MultiTexCoord3fv, (), target: GLenum, v: *const GLfloat);
     func!(MultiTexCoord3i, (), target: GLenum, s: GLint, t: GLint, r: GLint);
     func!(MultiTexCoord3iv, (), target: GLenum, v: *const GLint);
     func!(MultiTexCoord3s, (), target: GLenum, s: GLshort, t: GLshort, r: GLshort);
     func!(MultiTexCoord3sv, (), target: GLenum, v: *const GLshort);
     func!(MultiTexCoord4d, (), target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble);
     func!(MultiTexCoord4dv, (), target: GLenum, v: *const GLdouble);
     func!(MultiTexCoord4f, (), target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat);
     func!(MultiTexCoord4fv, (), target: GLenum, v: *const GLfloat);
     func!(MultiTexCoord4i, (), target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint);
     func!(MultiTexCoord4iv, (), target: GLenum, v: *const GLint);
     func!(MultiTexCoord4s, (), target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort);
     func!(MultiTexCoord4sv, (), target: GLenum, v: *const GLshort);
     func!(MultiTexCoordP1ui, (), texture: GLenum, type_: GLenum, coords: GLuint);
     func!(MultiTexCoordP1uiv, (), texture: GLenum, type_: GLenum, coords: *const GLuint);
     func!(MultiTexCoordP2ui, (), texture: GLenum, type_: GLenum, coords: GLuint);
     func!(MultiTexCoordP2uiv, (), texture: GLenum, type_: GLenum, coords: *const GLuint);
     func!(MultiTexCoordP3ui, (), texture: GLenum, type_: GLenum, coords: GLuint);
     func!(MultiTexCoordP3uiv, (), texture: GLenum, type_: GLenum, coords: *const GLuint);
     func!(MultiTexCoordP4ui, (), texture: GLenum, type_: GLenum, coords: GLuint);
     func!(MultiTexCoordP4uiv, (), texture: GLenum, type_: GLenum, coords: *const GLuint);
     func!(NewList, (), list: GLuint, mode: GLenum);
     func!(Normal3b, (), nx: GLbyte, ny: GLbyte, nz: GLbyte);
     func!(Normal3bv, (), v: *const GLbyte);
     func!(Normal3d, (), nx: GLdouble, ny: GLdouble, nz: GLdouble);
     func!(Normal3dv, (), v: *const GLdouble);
     func!(Normal3f, (), nx: GLfloat, ny: GLfloat, nz: GLfloat);
     func!(Normal3fv, (), v: *const GLfloat);
     func!(Normal3i, (), nx: GLint, ny: GLint, nz: GLint);
     func!(Normal3iv, (), v: *const GLint);
     func!(Normal3s, (), nx: GLshort, ny: GLshort, nz: GLshort);
     func!(Normal3sv, (), v: *const GLshort);
     func!(NormalP3ui, (), type_: GLenum, coords: GLuint);
     func!(NormalP3uiv, (), type_: GLenum, coords: *const GLuint);
     func!(NormalPointer, (), type_: GLenum, stride: GLsizei, pointer: *const c_void);
     func!(Ortho, (), left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble);
     func!(PassThrough, (), token: GLfloat);
     func!(PixelMapfv, (), map: GLenum, mapsize: GLsizei, values: *const GLfloat);
     func!(PixelMapuiv, (), map: GLenum, mapsize: GLsizei, values: *const GLuint);
     func!(PixelMapusv, (), map: GLenum, mapsize: GLsizei, values: *const GLushort);
     func!(PixelStoref, (), pname: GLenum, param: GLfloat);
     func!(PixelStorei, (), pname: GLenum, param: GLint);
     func!(PixelTransferf, (), pname: GLenum, param: GLfloat);
     func!(PixelTransferi, (), pname: GLenum, param: GLint);
     func!(PixelZoom, (), xfactor: GLfloat, yfactor: GLfloat);
     func!(PointParameterf, (), pname: GLenum, param: GLfloat);
     func!(PointParameterfv, (), pname: GLenum, params: *const GLfloat);
     func!(PointParameteri, (), pname: GLenum, param: GLint);
     func!(PointParameteriv, (), pname: GLenum, params: *const GLint);
     func!(PointSize, (), size: GLfloat);
     func!(PolygonMode, (), face: GLenum, mode: GLenum);
     func!(PolygonOffset, (), factor: GLfloat, units: GLfloat);
     func!(PolygonStipple, (), mask: *const GLubyte);
     func!(PopAttrib, (), );
     func!(PopClientAttrib, (), );
     func!(PopMatrix, (), );
     func!(PopName, (), );
     func!(PrimitiveRestartIndex, (), index: GLuint);
     func!(PrioritizeTextures, (), n: GLsizei, textures: *const GLuint, priorities: *const GLfloat);
     func!(ProvokingVertex, (), mode: GLenum);
     func!(PushAttrib, (), mask: GLbitfield);
     func!(PushClientAttrib, (), mask: GLbitfield);
     func!(PushMatrix, (), );
     func!(PushName, (), name: GLuint);
     func!(QueryCounter, (), id: GLuint, target: GLenum);
     func!(RasterPos2d, (), x: GLdouble, y: GLdouble);
     func!(RasterPos2dv, (), v: *const GLdouble);
     func!(RasterPos2f, (), x: GLfloat, y: GLfloat);
     func!(RasterPos2fv, (), v: *const GLfloat);
     func!(RasterPos2i, (), x: GLint, y: GLint);
     func!(RasterPos2iv, (), v: *const GLint);
     func!(RasterPos2s, (), x: GLshort, y: GLshort);
     func!(RasterPos2sv, (), v: *const GLshort);
     func!(RasterPos3d, (), x: GLdouble, y: GLdouble, z: GLdouble);
     func!(RasterPos3dv, (), v: *const GLdouble);
     func!(RasterPos3f, (), x: GLfloat, y: GLfloat, z: GLfloat);
     func!(RasterPos3fv, (), v: *const GLfloat);
     func!(RasterPos3i, (), x: GLint, y: GLint, z: GLint);
     func!(RasterPos3iv, (), v: *const GLint);
     func!(RasterPos3s, (), x: GLshort, y: GLshort, z: GLshort);
     func!(RasterPos3sv, (), v: *const GLshort);
     func!(RasterPos4d, (), x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);
     func!(RasterPos4dv, (), v: *const GLdouble);
     func!(RasterPos4f, (), x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);
     func!(RasterPos4fv, (), v: *const GLfloat);
     func!(RasterPos4i, (), x: GLint, y: GLint, z: GLint, w: GLint);
     func!(RasterPos4iv, (), v: *const GLint);
     func!(RasterPos4s, (), x: GLshort, y: GLshort, z: GLshort, w: GLshort);
     func!(RasterPos4sv, (), v: *const GLshort);
     func!(ReadBuffer, (), src: GLenum);
     func!(ReadPixels, (), x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *mut c_void);
     func!(Rectd, (), x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble);
     func!(Rectdv, (), v1: *const GLdouble, v2: *const GLdouble);
     func!(Rectf, (), x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat);
     func!(Rectfv, (), v1: *const GLfloat, v2: *const GLfloat);
     func!(Recti, (), x1: GLint, y1: GLint, x2: GLint, y2: GLint);
     func!(Rectiv, (), v1: *const GLint, v2: *const GLint);
     func!(Rects, (), x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort);
     func!(Rectsv, (), v1: *const GLshort, v2: *const GLshort);
     func!(RenderMode, GLint, mode: GLenum);
     func!(RenderbufferStorage, (), target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei);
     func!(RenderbufferStorageMultisample, (), target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei);
     func!(Rotated, (), angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble);
     func!(Rotatef, (), angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);
     func!(SampleCoverage, (), value: GLfloat, invert: GLboolean);
     func!(SampleMaski, (), maskNumber: GLuint, mask: GLbitfield);
     func!(SamplerParameterIiv, (), sampler: GLuint, pname: GLenum, param: *const GLint);
     func!(SamplerParameterIuiv, (), sampler: GLuint, pname: GLenum, param: *const GLuint);
     func!(SamplerParameterf, (), sampler: GLuint, pname: GLenum, param: GLfloat);
     func!(SamplerParameterfv, (), sampler: GLuint, pname: GLenum, param: *const GLfloat);
     func!(SamplerParameteri, (), sampler: GLuint, pname: GLenum, param: GLint);
     func!(SamplerParameteriv, (), sampler: GLuint, pname: GLenum, param: *const GLint);
     func!(Scaled, (), x: GLdouble, y: GLdouble, z: GLdouble);
     func!(Scalef, (), x: GLfloat, y: GLfloat, z: GLfloat);
     func!(Scissor, (), x: GLint, y: GLint, width: GLsizei, height: GLsizei);
     func!(SecondaryColor3b, (), red: GLbyte, green: GLbyte, blue: GLbyte);
     func!(SecondaryColor3bv, (), v: *const GLbyte);
     func!(SecondaryColor3d, (), red: GLdouble, green: GLdouble, blue: GLdouble);
     func!(SecondaryColor3dv, (), v: *const GLdouble);
     func!(SecondaryColor3f, (), red: GLfloat, green: GLfloat, blue: GLfloat);
     func!(SecondaryColor3fv, (), v: *const GLfloat);
     func!(SecondaryColor3i, (), red: GLint, green: GLint, blue: GLint);
     func!(SecondaryColor3iv, (), v: *const GLint);
     func!(SecondaryColor3s, (), red: GLshort, green: GLshort, blue: GLshort);
     func!(SecondaryColor3sv, (), v: *const GLshort);
     func!(SecondaryColor3ub, (), red: GLubyte, green: GLubyte, blue: GLubyte);
     func!(SecondaryColor3ubv, (), v: *const GLubyte);
     func!(SecondaryColor3ui, (), red: GLuint, green: GLuint, blue: GLuint);
     func!(SecondaryColor3uiv, (), v: *const GLuint);
     func!(SecondaryColor3us, (), red: GLushort, green: GLushort, blue: GLushort);
     func!(SecondaryColor3usv, (), v: *const GLushort);
     func!(SecondaryColorP3ui, (), type_: GLenum, color: GLuint);
     func!(SecondaryColorP3uiv, (), type_: GLenum, color: *const GLuint);
     func!(SecondaryColorPointer, (), size: GLint, type_: GLenum, stride: GLsizei, pointer: *const c_void);
     func!(SelectBuffer, (), size: GLsizei, buffer: *mut GLuint);
     func!(ShadeModel, (), mode: GLenum);
     func!(ShaderSource, (), shader: GLuint, count: GLsizei, string: *const *const GLchar, length: *const GLint);
     func!(StencilFunc, (), func: GLenum, ref_: GLint, mask: GLuint);
     func!(StencilFuncSeparate, (), face: GLenum, func: GLenum, ref_: GLint, mask: GLuint);
     func!(StencilMask, (), mask: GLuint);
     func!(StencilMaskSeparate, (), face: GLenum, mask: GLuint);
     func!(StencilOp, (), fail: GLenum, zfail: GLenum, zpass: GLenum);
     func!(StencilOpSeparate, (), face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum);
     func!(TexBuffer, (), target: GLenum, internalformat: GLenum, buffer: GLuint);
     func!(TexCoord1d, (), s: GLdouble);
     func!(TexCoord1dv, (), v: *const GLdouble);
     func!(TexCoord1f, (), s: GLfloat);
     func!(TexCoord1fv, (), v: *const GLfloat);
     func!(TexCoord1i, (), s: GLint);
     func!(TexCoord1iv, (), v: *const GLint);
     func!(TexCoord1s, (), s: GLshort);
     func!(TexCoord1sv, (), v: *const GLshort);
     func!(TexCoord2d, (), s: GLdouble, t: GLdouble);
     func!(TexCoord2dv, (), v: *const GLdouble);
     func!(TexCoord2f, (), s: GLfloat, t: GLfloat);
     func!(TexCoord2fv, (), v: *const GLfloat);
     func!(TexCoord2i, (), s: GLint, t: GLint);
     func!(TexCoord2iv, (), v: *const GLint);
     func!(TexCoord2s, (), s: GLshort, t: GLshort);
     func!(TexCoord2sv, (), v: *const GLshort);
     func!(TexCoord3d, (), s: GLdouble, t: GLdouble, r: GLdouble);
     func!(TexCoord3dv, (), v: *const GLdouble);
     func!(TexCoord3f, (), s: GLfloat, t: GLfloat, r: GLfloat);
     func!(TexCoord3fv, (), v: *const GLfloat);
     func!(TexCoord3i, (), s: GLint, t: GLint, r: GLint);
     func!(TexCoord3iv, (), v: *const GLint);
     func!(TexCoord3s, (), s: GLshort, t: GLshort, r: GLshort);
     func!(TexCoord3sv, (), v: *const GLshort);
     func!(TexCoord4d, (), s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble);
     func!(TexCoord4dv, (), v: *const GLdouble);
     func!(TexCoord4f, (), s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat);
     func!(TexCoord4fv, (), v: *const GLfloat);
     func!(TexCoord4i, (), s: GLint, t: GLint, r: GLint, q: GLint);
     func!(TexCoord4iv, (), v: *const GLint);
     func!(TexCoord4s, (), s: GLshort, t: GLshort, r: GLshort, q: GLshort);
     func!(TexCoord4sv, (), v: *const GLshort);
     func!(TexCoordP1ui, (), type_: GLenum, coords: GLuint);
     func!(TexCoordP1uiv, (), type_: GLenum, coords: *const GLuint);
     func!(TexCoordP2ui, (), type_: GLenum, coords: GLuint);
     func!(TexCoordP2uiv, (), type_: GLenum, coords: *const GLuint);
     func!(TexCoordP3ui, (), type_: GLenum, coords: GLuint);
     func!(TexCoordP3uiv, (), type_: GLenum, coords: *const GLuint);
     func!(TexCoordP4ui, (), type_: GLenum, coords: GLuint);
     func!(TexCoordP4uiv, (), type_: GLenum, coords: *const GLuint);
     func!(TexCoordPointer, (), size: GLint, type_: GLenum, stride: GLsizei, pointer: *const c_void);
     func!(TexEnvf, (), target: GLenum, pname: GLenum, param: GLfloat);
     func!(TexEnvfv, (), target: GLenum, pname: GLenum, params: *const GLfloat);
     func!(TexEnvi, (), target: GLenum, pname: GLenum, param: GLint);
     func!(TexEnviv, (), target: GLenum, pname: GLenum, params: *const GLint);
     func!(TexGend, (), coord: GLenum, pname: GLenum, param: GLdouble);
     func!(TexGendv, (), coord: GLenum, pname: GLenum, params: *const GLdouble);
     func!(TexGenf, (), coord: GLenum, pname: GLenum, param: GLfloat);
     func!(TexGenfv, (), coord: GLenum, pname: GLenum, params: *const GLfloat);
     func!(TexGeni, (), coord: GLenum, pname: GLenum, param: GLint);
     func!(TexGeniv, (), coord: GLenum, pname: GLenum, params: *const GLint);
     func!(TexImage1D, (), target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *const c_void);
     func!(TexImage2D, (), target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *const c_void);
     func!(TexImage2DMultisample, (), target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean);
     func!(TexImage3D, (), target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *const c_void);
     func!(TexImage3DMultisample, (), target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean);
     func!(TexParameterIiv, (), target: GLenum, pname: GLenum, params: *const GLint);
     func!(TexParameterIuiv, (), target: GLenum, pname: GLenum, params: *const GLuint);
     func!(TexParameterf, (), target: GLenum, pname: GLenum, param: GLfloat);
     func!(TexParameterfv, (), target: GLenum, pname: GLenum, params: *const GLfloat);
     func!(TexParameteri, (), target: GLenum, pname: GLenum, param: GLint);
     func!(TexParameteriv, (), target: GLenum, pname: GLenum, params: *const GLint);
     func!(TexSubImage1D, (), target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *const c_void);
     func!(TexSubImage2D, (), target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *const c_void);
     func!(TexSubImage3D, (), target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *const c_void);
     func!(TransformFeedbackVaryings, (), program: GLuint, count: GLsizei, varyings: *const *const GLchar, bufferMode: GLenum);
     func!(Translated, (), x: GLdouble, y: GLdouble, z: GLdouble);
     func!(Translatef, (), x: GLfloat, y: GLfloat, z: GLfloat);
     func!(Uniform1f, (), location: GLint, v0: GLfloat);
     func!(Uniform1fv, (), location: GLint, count: GLsizei, value: *const GLfloat);
     func!(Uniform1i, (), location: GLint, v0: GLint);
     func!(Uniform1iv, (), location: GLint, count: GLsizei, value: *const GLint);
     func!(Uniform1ui, (), location: GLint, v0: GLuint);
     func!(Uniform1uiv, (), location: GLint, count: GLsizei, value: *const GLuint);
     func!(Uniform2f, (), location: GLint, v0: GLfloat, v1: GLfloat);
     func!(Uniform2fv, (), location: GLint, count: GLsizei, value: *const GLfloat);
     func!(Uniform2i, (), location: GLint, v0: GLint, v1: GLint);
     func!(Uniform2iv, (), location: GLint, count: GLsizei, value: *const GLint);
     func!(Uniform2ui, (), location: GLint, v0: GLuint, v1: GLuint);
     func!(Uniform2uiv, (), location: GLint, count: GLsizei, value: *const GLuint);
     func!(Uniform3f, (), location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat);
     func!(Uniform3fv, (), location: GLint, count: GLsizei, value: *const GLfloat);
     func!(Uniform3i, (), location: GLint, v0: GLint, v1: GLint, v2: GLint);
     func!(Uniform3iv, (), location: GLint, count: GLsizei, value: *const GLint);
     func!(Uniform3ui, (), location: GLint, v0: GLuint, v1: GLuint, v2: GLuint);
     func!(Uniform3uiv, (), location: GLint, count: GLsizei, value: *const GLuint);
     func!(Uniform4f, (), location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat);
     func!(Uniform4fv, (), location: GLint, count: GLsizei, value: *const GLfloat);
     func!(Uniform4i, (), location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint);
     func!(Uniform4iv, (), location: GLint, count: GLsizei, value: *const GLint);
     func!(Uniform4ui, (), location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint);
     func!(Uniform4uiv, (), location: GLint, count: GLsizei, value: *const GLuint);
     func!(UniformBlockBinding, (), program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint);
     func!(UniformMatrix2fv, (), location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat);
     func!(UniformMatrix2x3fv, (), location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat);
     func!(UniformMatrix2x4fv, (), location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat);
     func!(UniformMatrix3fv, (), location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat);
     func!(UniformMatrix3x2fv, (), location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat);
     func!(UniformMatrix3x4fv, (), location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat);
     func!(UniformMatrix4fv, (), location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat);
     func!(UniformMatrix4x2fv, (), location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat);
     func!(UniformMatrix4x3fv, (), location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat);
     func!(UnmapBuffer, GLboolean, target: GLenum);
     func!(UseProgram, (), program: GLuint);
     func!(ValidateProgram, (), program: GLuint);
     func!(Vertex2d, (), x: GLdouble, y: GLdouble);
     func!(Vertex2dv, (), v: *const GLdouble);
     func!(Vertex2f, (), x: GLfloat, y: GLfloat);
     func!(Vertex2fv, (), v: *const GLfloat);
     func!(Vertex2i, (), x: GLint, y: GLint);
     func!(Vertex2iv, (), v: *const GLint);
     func!(Vertex2s, (), x: GLshort, y: GLshort);
     func!(Vertex2sv, (), v: *const GLshort);
     func!(Vertex3d, (), x: GLdouble, y: GLdouble, z: GLdouble);
     func!(Vertex3dv, (), v: *const GLdouble);
     func!(Vertex3f, (), x: GLfloat, y: GLfloat, z: GLfloat);
     func!(Vertex3fv, (), v: *const GLfloat);
     func!(Vertex3i, (), x: GLint, y: GLint, z: GLint);
     func!(Vertex3iv, (), v: *const GLint);
     func!(Vertex3s, (), x: GLshort, y: GLshort, z: GLshort);
     func!(Vertex3sv, (), v: *const GLshort);
     func!(Vertex4d, (), x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);
     func!(Vertex4dv, (), v: *const GLdouble);
     func!(Vertex4f, (), x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);
     func!(Vertex4fv, (), v: *const GLfloat);
     func!(Vertex4i, (), x: GLint, y: GLint, z: GLint, w: GLint);
     func!(Vertex4iv, (), v: *const GLint);
     func!(Vertex4s, (), x: GLshort, y: GLshort, z: GLshort, w: GLshort);
     func!(Vertex4sv, (), v: *const GLshort);
     func!(VertexAttrib1d, (), index: GLuint, x: GLdouble);
     func!(VertexAttrib1dv, (), index: GLuint, v: *const GLdouble);
     func!(VertexAttrib1f, (), index: GLuint, x: GLfloat);
     func!(VertexAttrib1fv, (), index: GLuint, v: *const GLfloat);
     func!(VertexAttrib1s, (), index: GLuint, x: GLshort);
     func!(VertexAttrib1sv, (), index: GLuint, v: *const GLshort);
     func!(VertexAttrib2d, (), index: GLuint, x: GLdouble, y: GLdouble);
     func!(VertexAttrib2dv, (), index: GLuint, v: *const GLdouble);
     func!(VertexAttrib2f, (), index: GLuint, x: GLfloat, y: GLfloat);
     func!(VertexAttrib2fv, (), index: GLuint, v: *const GLfloat);
     func!(VertexAttrib2s, (), index: GLuint, x: GLshort, y: GLshort);
     func!(VertexAttrib2sv, (), index: GLuint, v: *const GLshort);
     func!(VertexAttrib3d, (), index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble);
     func!(VertexAttrib3dv, (), index: GLuint, v: *const GLdouble);
     func!(VertexAttrib3f, (), index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat);
     func!(VertexAttrib3fv, (), index: GLuint, v: *const GLfloat);
     func!(VertexAttrib3s, (), index: GLuint, x: GLshort, y: GLshort, z: GLshort);
     func!(VertexAttrib3sv, (), index: GLuint, v: *const GLshort);
     func!(VertexAttrib4Nbv, (), index: GLuint, v: *const GLbyte);
     func!(VertexAttrib4Niv, (), index: GLuint, v: *const GLint);
     func!(VertexAttrib4Nsv, (), index: GLuint, v: *const GLshort);
     func!(VertexAttrib4Nub, (), index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte);
     func!(VertexAttrib4Nubv, (), index: GLuint, v: *const GLubyte);
     func!(VertexAttrib4Nuiv, (), index: GLuint, v: *const GLuint);
     func!(VertexAttrib4Nusv, (), index: GLuint, v: *const GLushort);
     func!(VertexAttrib4bv, (), index: GLuint, v: *const GLbyte);
     func!(VertexAttrib4d, (), index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);
     func!(VertexAttrib4dv, (), index: GLuint, v: *const GLdouble);
     func!(VertexAttrib4f, (), index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);
     func!(VertexAttrib4fv, (), index: GLuint, v: *const GLfloat);
     func!(VertexAttrib4iv, (), index: GLuint, v: *const GLint);
     func!(VertexAttrib4s, (), index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort);
     func!(VertexAttrib4sv, (), index: GLuint, v: *const GLshort);
     func!(VertexAttrib4ubv, (), index: GLuint, v: *const GLubyte);
     func!(VertexAttrib4uiv, (), index: GLuint, v: *const GLuint);
     func!(VertexAttrib4usv, (), index: GLuint, v: *const GLushort);
     func!(VertexAttribDivisor, (), index: GLuint, divisor: GLuint);
     func!(VertexAttribI1i, (), index: GLuint, x: GLint);
     func!(VertexAttribI1iv, (), index: GLuint, v: *const GLint);
     func!(VertexAttribI1ui, (), index: GLuint, x: GLuint);
     func!(VertexAttribI1uiv, (), index: GLuint, v: *const GLuint);
     func!(VertexAttribI2i, (), index: GLuint, x: GLint, y: GLint);
     func!(VertexAttribI2iv, (), index: GLuint, v: *const GLint);
     func!(VertexAttribI2ui, (), index: GLuint, x: GLuint, y: GLuint);
     func!(VertexAttribI2uiv, (), index: GLuint, v: *const GLuint);
     func!(VertexAttribI3i, (), index: GLuint, x: GLint, y: GLint, z: GLint);
     func!(VertexAttribI3iv, (), index: GLuint, v: *const GLint);
     func!(VertexAttribI3ui, (), index: GLuint, x: GLuint, y: GLuint, z: GLuint);
     func!(VertexAttribI3uiv, (), index: GLuint, v: *const GLuint);
     func!(VertexAttribI4bv, (), index: GLuint, v: *const GLbyte);
     func!(VertexAttribI4i, (), index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint);
     func!(VertexAttribI4iv, (), index: GLuint, v: *const GLint);
     func!(VertexAttribI4sv, (), index: GLuint, v: *const GLshort);
     func!(VertexAttribI4ubv, (), index: GLuint, v: *const GLubyte);
     func!(VertexAttribI4ui, (), index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint);
     func!(VertexAttribI4uiv, (), index: GLuint, v: *const GLuint);
     func!(VertexAttribI4usv, (), index: GLuint, v: *const GLushort);
     func!(VertexAttribIPointer, (), index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *const c_void);
     func!(VertexAttribP1ui, (), index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint);
     func!(VertexAttribP1uiv, (), index: GLuint, type_: GLenum, normalized: GLboolean, value: *const GLuint);
     func!(VertexAttribP2ui, (), index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint);
     func!(VertexAttribP2uiv, (), index: GLuint, type_: GLenum, normalized: GLboolean, value: *const GLuint);
     func!(VertexAttribP3ui, (), index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint);
     func!(VertexAttribP3uiv, (), index: GLuint, type_: GLenum, normalized: GLboolean, value: *const GLuint);
     func!(VertexAttribP4ui, (), index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint);
     func!(VertexAttribP4uiv, (), index: GLuint, type_: GLenum, normalized: GLboolean, value: *const GLuint);
     func!(VertexAttribPointer, (), index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, pointer: *const c_void);
     func!(VertexP2ui, (), type_: GLenum, value: GLuint);
     func!(VertexP2uiv, (), type_: GLenum, value: *const GLuint);
     func!(VertexP3ui, (), type_: GLenum, value: GLuint);
     func!(VertexP3uiv, (), type_: GLenum, value: *const GLuint);
     func!(VertexP4ui, (), type_: GLenum, value: GLuint);
     func!(VertexP4uiv, (), type_: GLenum, value: *const GLuint);
     func!(VertexPointer, (), size: GLint, type_: GLenum, stride: GLsizei, pointer: *const c_void);
     func!(Viewport, (), x: GLint, y: GLint, width: GLsizei, height: GLsizei);
     func!(WaitSync, (), sync: GLsync, flags: GLbitfield, timeout: GLuint64);
     func!(WindowPos2d, (), x: GLdouble, y: GLdouble);
     func!(WindowPos2dv, (), v: *const GLdouble);
     func!(WindowPos2f, (), x: GLfloat, y: GLfloat);
     func!(WindowPos2fv, (), v: *const GLfloat);
     func!(WindowPos2i, (), x: GLint, y: GLint);
     func!(WindowPos2iv, (), v: *const GLint);
     func!(WindowPos2s, (), x: GLshort, y: GLshort);
     func!(WindowPos2sv, (), v: *const GLshort);
     func!(WindowPos3d, (), x: GLdouble, y: GLdouble, z: GLdouble);
     func!(WindowPos3dv, (), v: *const GLdouble);
     func!(WindowPos3f, (), x: GLfloat, y: GLfloat, z: GLfloat);
     func!(WindowPos3fv, (), v: *const GLfloat);
     func!(WindowPos3i, (), x: GLint, y: GLint, z: GLint);
     func!(WindowPos3iv, (), v: *const GLint);
     func!(WindowPos3s, (), x: GLshort, y: GLshort, z: GLshort);
     func!(WindowPos3sv, (), v: *const GLshort);

    
}

mod storage {
    #![allow(non_snake_case, non_upper_case_globals)]

    use super::FnPtr;
    use std::os::raw::*;

    macro_rules! store {
        ($name:ident) => {
            pub(super) static mut $name: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const c_void, is_loaded: false };
        }
    }

     store!(Accum);
     store!(ActiveTexture);
     store!(AlphaFunc);
     store!(AreTexturesResident);
     store!(ArrayElement);
     store!(AttachShader);
     store!(Begin);
     store!(BeginConditionalRender);
     store!(BeginQuery);
     store!(BeginTransformFeedback);
     store!(BindAttribLocation);
     store!(BindBuffer);
     store!(BindBufferBase);
     store!(BindBufferRange);
     store!(BindFragDataLocation);
     store!(BindFragDataLocationIndexed);
     store!(BindFramebuffer);
     store!(BindRenderbuffer);
     store!(BindSampler);
     store!(BindTexture);
     store!(BindVertexArray);
     store!(Bitmap);
     store!(BlendColor);
     store!(BlendEquation);
     store!(BlendEquationSeparate);
     store!(BlendFunc);
     store!(BlendFuncSeparate);
     store!(BlitFramebuffer);
     store!(BufferData);
     store!(BufferSubData);
     store!(CallList);
     store!(CallLists);
     store!(CheckFramebufferStatus);
     store!(ClampColor);
     store!(Clear);
     store!(ClearAccum);
     store!(ClearBufferfi);
     store!(ClearBufferfv);
     store!(ClearBufferiv);
     store!(ClearBufferuiv);
     store!(ClearColor);
     store!(ClearDepth);
     store!(ClearIndex);
     store!(ClearStencil);
     store!(ClientActiveTexture);
     store!(ClientWaitSync);
     store!(ClipPlane);
     store!(Color3b);
     store!(Color3bv);
     store!(Color3d);
     store!(Color3dv);
     store!(Color3f);
     store!(Color3fv);
     store!(Color3i);
     store!(Color3iv);
     store!(Color3s);
     store!(Color3sv);
     store!(Color3ub);
     store!(Color3ubv);
     store!(Color3ui);
     store!(Color3uiv);
     store!(Color3us);
     store!(Color3usv);
     store!(Color4b);
     store!(Color4bv);
     store!(Color4d);
     store!(Color4dv);
     store!(Color4f);
     store!(Color4fv);
     store!(Color4i);
     store!(Color4iv);
     store!(Color4s);
     store!(Color4sv);
     store!(Color4ub);
     store!(Color4ubv);
     store!(Color4ui);
     store!(Color4uiv);
     store!(Color4us);
     store!(Color4usv);
     store!(ColorMask);
     store!(ColorMaski);
     store!(ColorMaterial);
     store!(ColorP3ui);
     store!(ColorP3uiv);
     store!(ColorP4ui);
     store!(ColorP4uiv);
     store!(ColorPointer);
     store!(CompileShader);
     store!(CompressedTexImage1D);
     store!(CompressedTexImage2D);
     store!(CompressedTexImage3D);
     store!(CompressedTexSubImage1D);
     store!(CompressedTexSubImage2D);
     store!(CompressedTexSubImage3D);
     store!(CopyBufferSubData);
     store!(CopyPixels);
     store!(CopyTexImage1D);
     store!(CopyTexImage2D);
     store!(CopyTexSubImage1D);
     store!(CopyTexSubImage2D);
     store!(CopyTexSubImage3D);
     store!(CreateProgram);
     store!(CreateShader);
     store!(CullFace);
     store!(DeleteBuffers);
     store!(DeleteFramebuffers);
     store!(DeleteLists);
     store!(DeleteProgram);
     store!(DeleteQueries);
     store!(DeleteRenderbuffers);
     store!(DeleteSamplers);
     store!(DeleteShader);
     store!(DeleteSync);
     store!(DeleteTextures);
     store!(DeleteVertexArrays);
     store!(DepthFunc);
     store!(DepthMask);
     store!(DepthRange);
     store!(DetachShader);
     store!(Disable);
     store!(DisableClientState);
     store!(DisableVertexAttribArray);
     store!(Disablei);
     store!(DrawArrays);
     store!(DrawArraysInstanced);
     store!(DrawBuffer);
     store!(DrawBuffers);
     store!(DrawElements);
     store!(DrawElementsBaseVertex);
     store!(DrawElementsInstanced);
     store!(DrawElementsInstancedBaseVertex);
     store!(DrawPixels);
     store!(DrawRangeElements);
     store!(DrawRangeElementsBaseVertex);
     store!(EdgeFlag);
     store!(EdgeFlagPointer);
     store!(EdgeFlagv);
     store!(Enable);
     store!(EnableClientState);
     store!(EnableVertexAttribArray);
     store!(Enablei);
     store!(End);
     store!(EndConditionalRender);
     store!(EndList);
     store!(EndQuery);
     store!(EndTransformFeedback);
     store!(EvalCoord1d);
     store!(EvalCoord1dv);
     store!(EvalCoord1f);
     store!(EvalCoord1fv);
     store!(EvalCoord2d);
     store!(EvalCoord2dv);
     store!(EvalCoord2f);
     store!(EvalCoord2fv);
     store!(EvalMesh1);
     store!(EvalMesh2);
     store!(EvalPoint1);
     store!(EvalPoint2);
     store!(FeedbackBuffer);
     store!(FenceSync);
     store!(Finish);
     store!(Flush);
     store!(FlushMappedBufferRange);
     store!(FogCoordPointer);
     store!(FogCoordd);
     store!(FogCoorddv);
     store!(FogCoordf);
     store!(FogCoordfv);
     store!(Fogf);
     store!(Fogfv);
     store!(Fogi);
     store!(Fogiv);
     store!(FramebufferRenderbuffer);
     store!(FramebufferTexture);
     store!(FramebufferTexture1D);
     store!(FramebufferTexture2D);
     store!(FramebufferTexture3D);
     store!(FramebufferTextureLayer);
     store!(FrontFace);
     store!(Frustum);
     store!(GenBuffers);
     store!(GenFramebuffers);
     store!(GenLists);
     store!(GenQueries);
     store!(GenRenderbuffers);
     store!(GenSamplers);
     store!(GenTextures);
     store!(GenVertexArrays);
     store!(GenerateMipmap);
     store!(GetActiveAttrib);
     store!(GetActiveUniform);
     store!(GetActiveUniformBlockName);
     store!(GetActiveUniformBlockiv);
     store!(GetActiveUniformName);
     store!(GetActiveUniformsiv);
     store!(GetAttachedShaders);
     store!(GetAttribLocation);
     store!(GetBooleani_v);
     store!(GetBooleanv);
     store!(GetBufferParameteri64v);
     store!(GetBufferParameteriv);
     store!(GetBufferPointerv);
     store!(GetBufferSubData);
     store!(GetClipPlane);
     store!(GetCompressedTexImage);
     store!(GetDoublev);
     store!(GetError);
     store!(GetFloatv);
     store!(GetFragDataIndex);
     store!(GetFragDataLocation);
     store!(GetFramebufferAttachmentParameteriv);
     store!(GetInteger64i_v);
     store!(GetInteger64v);
     store!(GetIntegeri_v);
     store!(GetIntegerv);
     store!(GetLightfv);
     store!(GetLightiv);
     store!(GetMapdv);
     store!(GetMapfv);
     store!(GetMapiv);
     store!(GetMaterialfv);
     store!(GetMaterialiv);
     store!(GetMultisamplefv);
     store!(GetPixelMapfv);
     store!(GetPixelMapuiv);
     store!(GetPixelMapusv);
     store!(GetPointerv);
     store!(GetPolygonStipple);
     store!(GetProgramInfoLog);
     store!(GetProgramiv);
     store!(GetQueryObjecti64v);
     store!(GetQueryObjectiv);
     store!(GetQueryObjectui64v);
     store!(GetQueryObjectuiv);
     store!(GetQueryiv);
     store!(GetRenderbufferParameteriv);
     store!(GetSamplerParameterIiv);
     store!(GetSamplerParameterIuiv);
     store!(GetSamplerParameterfv);
     store!(GetSamplerParameteriv);
     store!(GetShaderInfoLog);
     store!(GetShaderSource);
     store!(GetShaderiv);
     store!(GetString);
     store!(GetStringi);
     store!(GetSynciv);
     store!(GetTexEnvfv);
     store!(GetTexEnviv);
     store!(GetTexGendv);
     store!(GetTexGenfv);
     store!(GetTexGeniv);
     store!(GetTexImage);
     store!(GetTexLevelParameterfv);
     store!(GetTexLevelParameteriv);
     store!(GetTexParameterIiv);
     store!(GetTexParameterIuiv);
     store!(GetTexParameterfv);
     store!(GetTexParameteriv);
     store!(GetTransformFeedbackVarying);
     store!(GetUniformBlockIndex);
     store!(GetUniformIndices);
     store!(GetUniformLocation);
     store!(GetUniformfv);
     store!(GetUniformiv);
     store!(GetUniformuiv);
     store!(GetVertexAttribIiv);
     store!(GetVertexAttribIuiv);
     store!(GetVertexAttribPointerv);
     store!(GetVertexAttribdv);
     store!(GetVertexAttribfv);
     store!(GetVertexAttribiv);
     store!(Hint);
     store!(IndexMask);
     store!(IndexPointer);
     store!(Indexd);
     store!(Indexdv);
     store!(Indexf);
     store!(Indexfv);
     store!(Indexi);
     store!(Indexiv);
     store!(Indexs);
     store!(Indexsv);
     store!(Indexub);
     store!(Indexubv);
     store!(InitNames);
     store!(InterleavedArrays);
     store!(IsBuffer);
     store!(IsEnabled);
     store!(IsEnabledi);
     store!(IsFramebuffer);
     store!(IsList);
     store!(IsProgram);
     store!(IsQuery);
     store!(IsRenderbuffer);
     store!(IsSampler);
     store!(IsShader);
     store!(IsSync);
     store!(IsTexture);
     store!(IsVertexArray);
     store!(LightModelf);
     store!(LightModelfv);
     store!(LightModeli);
     store!(LightModeliv);
     store!(Lightf);
     store!(Lightfv);
     store!(Lighti);
     store!(Lightiv);
     store!(LineStipple);
     store!(LineWidth);
     store!(LinkProgram);
     store!(ListBase);
     store!(LoadIdentity);
     store!(LoadMatrixd);
     store!(LoadMatrixf);
     store!(LoadName);
     store!(LoadTransposeMatrixd);
     store!(LoadTransposeMatrixf);
     store!(LogicOp);
     store!(Map1d);
     store!(Map1f);
     store!(Map2d);
     store!(Map2f);
     store!(MapBuffer);
     store!(MapBufferRange);
     store!(MapGrid1d);
     store!(MapGrid1f);
     store!(MapGrid2d);
     store!(MapGrid2f);
     store!(Materialf);
     store!(Materialfv);
     store!(Materiali);
     store!(Materialiv);
     store!(MatrixMode);
     store!(MultMatrixd);
     store!(MultMatrixf);
     store!(MultTransposeMatrixd);
     store!(MultTransposeMatrixf);
     store!(MultiDrawArrays);
     store!(MultiDrawElements);
     store!(MultiDrawElementsBaseVertex);
     store!(MultiTexCoord1d);
     store!(MultiTexCoord1dv);
     store!(MultiTexCoord1f);
     store!(MultiTexCoord1fv);
     store!(MultiTexCoord1i);
     store!(MultiTexCoord1iv);
     store!(MultiTexCoord1s);
     store!(MultiTexCoord1sv);
     store!(MultiTexCoord2d);
     store!(MultiTexCoord2dv);
     store!(MultiTexCoord2f);
     store!(MultiTexCoord2fv);
     store!(MultiTexCoord2i);
     store!(MultiTexCoord2iv);
     store!(MultiTexCoord2s);
     store!(MultiTexCoord2sv);
     store!(MultiTexCoord3d);
     store!(MultiTexCoord3dv);
     store!(MultiTexCoord3f);
     store!(MultiTexCoord3fv);
     store!(MultiTexCoord3i);
     store!(MultiTexCoord3iv);
     store!(MultiTexCoord3s);
     store!(MultiTexCoord3sv);
     store!(MultiTexCoord4d);
     store!(MultiTexCoord4dv);
     store!(MultiTexCoord4f);
     store!(MultiTexCoord4fv);
     store!(MultiTexCoord4i);
     store!(MultiTexCoord4iv);
     store!(MultiTexCoord4s);
     store!(MultiTexCoord4sv);
     store!(MultiTexCoordP1ui);
     store!(MultiTexCoordP1uiv);
     store!(MultiTexCoordP2ui);
     store!(MultiTexCoordP2uiv);
     store!(MultiTexCoordP3ui);
     store!(MultiTexCoordP3uiv);
     store!(MultiTexCoordP4ui);
     store!(MultiTexCoordP4uiv);
     store!(NewList);
     store!(Normal3b);
     store!(Normal3bv);
     store!(Normal3d);
     store!(Normal3dv);
     store!(Normal3f);
     store!(Normal3fv);
     store!(Normal3i);
     store!(Normal3iv);
     store!(Normal3s);
     store!(Normal3sv);
     store!(NormalP3ui);
     store!(NormalP3uiv);
     store!(NormalPointer);
     store!(Ortho);
     store!(PassThrough);
     store!(PixelMapfv);
     store!(PixelMapuiv);
     store!(PixelMapusv);
     store!(PixelStoref);
     store!(PixelStorei);
     store!(PixelTransferf);
     store!(PixelTransferi);
     store!(PixelZoom);
     store!(PointParameterf);
     store!(PointParameterfv);
     store!(PointParameteri);
     store!(PointParameteriv);
     store!(PointSize);
     store!(PolygonMode);
     store!(PolygonOffset);
     store!(PolygonStipple);
     store!(PopAttrib);
     store!(PopClientAttrib);
     store!(PopMatrix);
     store!(PopName);
     store!(PrimitiveRestartIndex);
     store!(PrioritizeTextures);
     store!(ProvokingVertex);
     store!(PushAttrib);
     store!(PushClientAttrib);
     store!(PushMatrix);
     store!(PushName);
     store!(QueryCounter);
     store!(RasterPos2d);
     store!(RasterPos2dv);
     store!(RasterPos2f);
     store!(RasterPos2fv);
     store!(RasterPos2i);
     store!(RasterPos2iv);
     store!(RasterPos2s);
     store!(RasterPos2sv);
     store!(RasterPos3d);
     store!(RasterPos3dv);
     store!(RasterPos3f);
     store!(RasterPos3fv);
     store!(RasterPos3i);
     store!(RasterPos3iv);
     store!(RasterPos3s);
     store!(RasterPos3sv);
     store!(RasterPos4d);
     store!(RasterPos4dv);
     store!(RasterPos4f);
     store!(RasterPos4fv);
     store!(RasterPos4i);
     store!(RasterPos4iv);
     store!(RasterPos4s);
     store!(RasterPos4sv);
     store!(ReadBuffer);
     store!(ReadPixels);
     store!(Rectd);
     store!(Rectdv);
     store!(Rectf);
     store!(Rectfv);
     store!(Recti);
     store!(Rectiv);
     store!(Rects);
     store!(Rectsv);
     store!(RenderMode);
     store!(RenderbufferStorage);
     store!(RenderbufferStorageMultisample);
     store!(Rotated);
     store!(Rotatef);
     store!(SampleCoverage);
     store!(SampleMaski);
     store!(SamplerParameterIiv);
     store!(SamplerParameterIuiv);
     store!(SamplerParameterf);
     store!(SamplerParameterfv);
     store!(SamplerParameteri);
     store!(SamplerParameteriv);
     store!(Scaled);
     store!(Scalef);
     store!(Scissor);
     store!(SecondaryColor3b);
     store!(SecondaryColor3bv);
     store!(SecondaryColor3d);
     store!(SecondaryColor3dv);
     store!(SecondaryColor3f);
     store!(SecondaryColor3fv);
     store!(SecondaryColor3i);
     store!(SecondaryColor3iv);
     store!(SecondaryColor3s);
     store!(SecondaryColor3sv);
     store!(SecondaryColor3ub);
     store!(SecondaryColor3ubv);
     store!(SecondaryColor3ui);
     store!(SecondaryColor3uiv);
     store!(SecondaryColor3us);
     store!(SecondaryColor3usv);
     store!(SecondaryColorP3ui);
     store!(SecondaryColorP3uiv);
     store!(SecondaryColorPointer);
     store!(SelectBuffer);
     store!(ShadeModel);
     store!(ShaderSource);
     store!(StencilFunc);
     store!(StencilFuncSeparate);
     store!(StencilMask);
     store!(StencilMaskSeparate);
     store!(StencilOp);
     store!(StencilOpSeparate);
     store!(TexBuffer);
     store!(TexCoord1d);
     store!(TexCoord1dv);
     store!(TexCoord1f);
     store!(TexCoord1fv);
     store!(TexCoord1i);
     store!(TexCoord1iv);
     store!(TexCoord1s);
     store!(TexCoord1sv);
     store!(TexCoord2d);
     store!(TexCoord2dv);
     store!(TexCoord2f);
     store!(TexCoord2fv);
     store!(TexCoord2i);
     store!(TexCoord2iv);
     store!(TexCoord2s);
     store!(TexCoord2sv);
     store!(TexCoord3d);
     store!(TexCoord3dv);
     store!(TexCoord3f);
     store!(TexCoord3fv);
     store!(TexCoord3i);
     store!(TexCoord3iv);
     store!(TexCoord3s);
     store!(TexCoord3sv);
     store!(TexCoord4d);
     store!(TexCoord4dv);
     store!(TexCoord4f);
     store!(TexCoord4fv);
     store!(TexCoord4i);
     store!(TexCoord4iv);
     store!(TexCoord4s);
     store!(TexCoord4sv);
     store!(TexCoordP1ui);
     store!(TexCoordP1uiv);
     store!(TexCoordP2ui);
     store!(TexCoordP2uiv);
     store!(TexCoordP3ui);
     store!(TexCoordP3uiv);
     store!(TexCoordP4ui);
     store!(TexCoordP4uiv);
     store!(TexCoordPointer);
     store!(TexEnvf);
     store!(TexEnvfv);
     store!(TexEnvi);
     store!(TexEnviv);
     store!(TexGend);
     store!(TexGendv);
     store!(TexGenf);
     store!(TexGenfv);
     store!(TexGeni);
     store!(TexGeniv);
     store!(TexImage1D);
     store!(TexImage2D);
     store!(TexImage2DMultisample);
     store!(TexImage3D);
     store!(TexImage3DMultisample);
     store!(TexParameterIiv);
     store!(TexParameterIuiv);
     store!(TexParameterf);
     store!(TexParameterfv);
     store!(TexParameteri);
     store!(TexParameteriv);
     store!(TexSubImage1D);
     store!(TexSubImage2D);
     store!(TexSubImage3D);
     store!(TransformFeedbackVaryings);
     store!(Translated);
     store!(Translatef);
     store!(Uniform1f);
     store!(Uniform1fv);
     store!(Uniform1i);
     store!(Uniform1iv);
     store!(Uniform1ui);
     store!(Uniform1uiv);
     store!(Uniform2f);
     store!(Uniform2fv);
     store!(Uniform2i);
     store!(Uniform2iv);
     store!(Uniform2ui);
     store!(Uniform2uiv);
     store!(Uniform3f);
     store!(Uniform3fv);
     store!(Uniform3i);
     store!(Uniform3iv);
     store!(Uniform3ui);
     store!(Uniform3uiv);
     store!(Uniform4f);
     store!(Uniform4fv);
     store!(Uniform4i);
     store!(Uniform4iv);
     store!(Uniform4ui);
     store!(Uniform4uiv);
     store!(UniformBlockBinding);
     store!(UniformMatrix2fv);
     store!(UniformMatrix2x3fv);
     store!(UniformMatrix2x4fv);
     store!(UniformMatrix3fv);
     store!(UniformMatrix3x2fv);
     store!(UniformMatrix3x4fv);
     store!(UniformMatrix4fv);
     store!(UniformMatrix4x2fv);
     store!(UniformMatrix4x3fv);
     store!(UnmapBuffer);
     store!(UseProgram);
     store!(ValidateProgram);
     store!(Vertex2d);
     store!(Vertex2dv);
     store!(Vertex2f);
     store!(Vertex2fv);
     store!(Vertex2i);
     store!(Vertex2iv);
     store!(Vertex2s);
     store!(Vertex2sv);
     store!(Vertex3d);
     store!(Vertex3dv);
     store!(Vertex3f);
     store!(Vertex3fv);
     store!(Vertex3i);
     store!(Vertex3iv);
     store!(Vertex3s);
     store!(Vertex3sv);
     store!(Vertex4d);
     store!(Vertex4dv);
     store!(Vertex4f);
     store!(Vertex4fv);
     store!(Vertex4i);
     store!(Vertex4iv);
     store!(Vertex4s);
     store!(Vertex4sv);
     store!(VertexAttrib1d);
     store!(VertexAttrib1dv);
     store!(VertexAttrib1f);
     store!(VertexAttrib1fv);
     store!(VertexAttrib1s);
     store!(VertexAttrib1sv);
     store!(VertexAttrib2d);
     store!(VertexAttrib2dv);
     store!(VertexAttrib2f);
     store!(VertexAttrib2fv);
     store!(VertexAttrib2s);
     store!(VertexAttrib2sv);
     store!(VertexAttrib3d);
     store!(VertexAttrib3dv);
     store!(VertexAttrib3f);
     store!(VertexAttrib3fv);
     store!(VertexAttrib3s);
     store!(VertexAttrib3sv);
     store!(VertexAttrib4Nbv);
     store!(VertexAttrib4Niv);
     store!(VertexAttrib4Nsv);
     store!(VertexAttrib4Nub);
     store!(VertexAttrib4Nubv);
     store!(VertexAttrib4Nuiv);
     store!(VertexAttrib4Nusv);
     store!(VertexAttrib4bv);
     store!(VertexAttrib4d);
     store!(VertexAttrib4dv);
     store!(VertexAttrib4f);
     store!(VertexAttrib4fv);
     store!(VertexAttrib4iv);
     store!(VertexAttrib4s);
     store!(VertexAttrib4sv);
     store!(VertexAttrib4ubv);
     store!(VertexAttrib4uiv);
     store!(VertexAttrib4usv);
     store!(VertexAttribDivisor);
     store!(VertexAttribI1i);
     store!(VertexAttribI1iv);
     store!(VertexAttribI1ui);
     store!(VertexAttribI1uiv);
     store!(VertexAttribI2i);
     store!(VertexAttribI2iv);
     store!(VertexAttribI2ui);
     store!(VertexAttribI2uiv);
     store!(VertexAttribI3i);
     store!(VertexAttribI3iv);
     store!(VertexAttribI3ui);
     store!(VertexAttribI3uiv);
     store!(VertexAttribI4bv);
     store!(VertexAttribI4i);
     store!(VertexAttribI4iv);
     store!(VertexAttribI4sv);
     store!(VertexAttribI4ubv);
     store!(VertexAttribI4ui);
     store!(VertexAttribI4uiv);
     store!(VertexAttribI4usv);
     store!(VertexAttribIPointer);
     store!(VertexAttribP1ui);
     store!(VertexAttribP1uiv);
     store!(VertexAttribP2ui);
     store!(VertexAttribP2uiv);
     store!(VertexAttribP3ui);
     store!(VertexAttribP3uiv);
     store!(VertexAttribP4ui);
     store!(VertexAttribP4uiv);
     store!(VertexAttribPointer);
     store!(VertexP2ui);
     store!(VertexP2uiv);
     store!(VertexP3ui);
     store!(VertexP3uiv);
     store!(VertexP4ui);
     store!(VertexP4uiv);
     store!(VertexPointer);
     store!(Viewport);
     store!(WaitSync);
     store!(WindowPos2d);
     store!(WindowPos2dv);
     store!(WindowPos2f);
     store!(WindowPos2fv);
     store!(WindowPos2i);
     store!(WindowPos2iv);
     store!(WindowPos2s);
     store!(WindowPos2sv);
     store!(WindowPos3d);
     store!(WindowPos3dv);
     store!(WindowPos3f);
     store!(WindowPos3fv);
     store!(WindowPos3i);
     store!(WindowPos3iv);
     store!(WindowPos3s);
     store!(WindowPos3sv);
}

pub fn load<F>(mut loadfn: F) where F: FnMut(&'static str) -> *const c_void {
    unsafe {
         storage::Accum.set_ptr(loadfn("glAccum"));
         storage::ActiveTexture.set_ptr(loadfn("glActiveTexture"));
         storage::AlphaFunc.set_ptr(loadfn("glAlphaFunc"));
         storage::AreTexturesResident.set_ptr(loadfn("glAreTexturesResident"));
         storage::ArrayElement.set_ptr(loadfn("glArrayElement"));
         storage::AttachShader.set_ptr(loadfn("glAttachShader"));
         storage::Begin.set_ptr(loadfn("glBegin"));
         storage::BeginConditionalRender.set_ptr(loadfn("glBeginConditionalRender"));
         storage::BeginQuery.set_ptr(loadfn("glBeginQuery"));
         storage::BeginTransformFeedback.set_ptr(loadfn("glBeginTransformFeedback"));
         storage::BindAttribLocation.set_ptr(loadfn("glBindAttribLocation"));
         storage::BindBuffer.set_ptr(loadfn("glBindBuffer"));
         storage::BindBufferBase.set_ptr(loadfn("glBindBufferBase"));
         storage::BindBufferRange.set_ptr(loadfn("glBindBufferRange"));
         storage::BindFragDataLocation.set_ptr(loadfn("glBindFragDataLocation"));
         storage::BindFragDataLocationIndexed.set_ptr(loadfn("glBindFragDataLocationIndexed"));
         storage::BindFramebuffer.set_ptr(loadfn("glBindFramebuffer"));
         storage::BindRenderbuffer.set_ptr(loadfn("glBindRenderbuffer"));
         storage::BindSampler.set_ptr(loadfn("glBindSampler"));
         storage::BindTexture.set_ptr(loadfn("glBindTexture"));
         storage::BindVertexArray.set_ptr(loadfn("glBindVertexArray"));
         storage::Bitmap.set_ptr(loadfn("glBitmap"));
         storage::BlendColor.set_ptr(loadfn("glBlendColor"));
         storage::BlendEquation.set_ptr(loadfn("glBlendEquation"));
         storage::BlendEquationSeparate.set_ptr(loadfn("glBlendEquationSeparate"));
         storage::BlendFunc.set_ptr(loadfn("glBlendFunc"));
         storage::BlendFuncSeparate.set_ptr(loadfn("glBlendFuncSeparate"));
         storage::BlitFramebuffer.set_ptr(loadfn("glBlitFramebuffer"));
         storage::BufferData.set_ptr(loadfn("glBufferData"));
         storage::BufferSubData.set_ptr(loadfn("glBufferSubData"));
         storage::CallList.set_ptr(loadfn("glCallList"));
         storage::CallLists.set_ptr(loadfn("glCallLists"));
         storage::CheckFramebufferStatus.set_ptr(loadfn("glCheckFramebufferStatus"));
         storage::ClampColor.set_ptr(loadfn("glClampColor"));
         storage::Clear.set_ptr(loadfn("glClear"));
         storage::ClearAccum.set_ptr(loadfn("glClearAccum"));
         storage::ClearBufferfi.set_ptr(loadfn("glClearBufferfi"));
         storage::ClearBufferfv.set_ptr(loadfn("glClearBufferfv"));
         storage::ClearBufferiv.set_ptr(loadfn("glClearBufferiv"));
         storage::ClearBufferuiv.set_ptr(loadfn("glClearBufferuiv"));
         storage::ClearColor.set_ptr(loadfn("glClearColor"));
         storage::ClearDepth.set_ptr(loadfn("glClearDepth"));
         storage::ClearIndex.set_ptr(loadfn("glClearIndex"));
         storage::ClearStencil.set_ptr(loadfn("glClearStencil"));
         storage::ClientActiveTexture.set_ptr(loadfn("glClientActiveTexture"));
         storage::ClientWaitSync.set_ptr(loadfn("glClientWaitSync"));
         storage::ClipPlane.set_ptr(loadfn("glClipPlane"));
         storage::Color3b.set_ptr(loadfn("glColor3b"));
         storage::Color3bv.set_ptr(loadfn("glColor3bv"));
         storage::Color3d.set_ptr(loadfn("glColor3d"));
         storage::Color3dv.set_ptr(loadfn("glColor3dv"));
         storage::Color3f.set_ptr(loadfn("glColor3f"));
         storage::Color3fv.set_ptr(loadfn("glColor3fv"));
         storage::Color3i.set_ptr(loadfn("glColor3i"));
         storage::Color3iv.set_ptr(loadfn("glColor3iv"));
         storage::Color3s.set_ptr(loadfn("glColor3s"));
         storage::Color3sv.set_ptr(loadfn("glColor3sv"));
         storage::Color3ub.set_ptr(loadfn("glColor3ub"));
         storage::Color3ubv.set_ptr(loadfn("glColor3ubv"));
         storage::Color3ui.set_ptr(loadfn("glColor3ui"));
         storage::Color3uiv.set_ptr(loadfn("glColor3uiv"));
         storage::Color3us.set_ptr(loadfn("glColor3us"));
         storage::Color3usv.set_ptr(loadfn("glColor3usv"));
         storage::Color4b.set_ptr(loadfn("glColor4b"));
         storage::Color4bv.set_ptr(loadfn("glColor4bv"));
         storage::Color4d.set_ptr(loadfn("glColor4d"));
         storage::Color4dv.set_ptr(loadfn("glColor4dv"));
         storage::Color4f.set_ptr(loadfn("glColor4f"));
         storage::Color4fv.set_ptr(loadfn("glColor4fv"));
         storage::Color4i.set_ptr(loadfn("glColor4i"));
         storage::Color4iv.set_ptr(loadfn("glColor4iv"));
         storage::Color4s.set_ptr(loadfn("glColor4s"));
         storage::Color4sv.set_ptr(loadfn("glColor4sv"));
         storage::Color4ub.set_ptr(loadfn("glColor4ub"));
         storage::Color4ubv.set_ptr(loadfn("glColor4ubv"));
         storage::Color4ui.set_ptr(loadfn("glColor4ui"));
         storage::Color4uiv.set_ptr(loadfn("glColor4uiv"));
         storage::Color4us.set_ptr(loadfn("glColor4us"));
         storage::Color4usv.set_ptr(loadfn("glColor4usv"));
         storage::ColorMask.set_ptr(loadfn("glColorMask"));
         storage::ColorMaski.set_ptr(loadfn("glColorMaski"));
         storage::ColorMaterial.set_ptr(loadfn("glColorMaterial"));
         storage::ColorP3ui.set_ptr(loadfn("glColorP3ui"));
         storage::ColorP3uiv.set_ptr(loadfn("glColorP3uiv"));
         storage::ColorP4ui.set_ptr(loadfn("glColorP4ui"));
         storage::ColorP4uiv.set_ptr(loadfn("glColorP4uiv"));
         storage::ColorPointer.set_ptr(loadfn("glColorPointer"));
         storage::CompileShader.set_ptr(loadfn("glCompileShader"));
         storage::CompressedTexImage1D.set_ptr(loadfn("glCompressedTexImage1D"));
         storage::CompressedTexImage2D.set_ptr(loadfn("glCompressedTexImage2D"));
         storage::CompressedTexImage3D.set_ptr(loadfn("glCompressedTexImage3D"));
         storage::CompressedTexSubImage1D.set_ptr(loadfn("glCompressedTexSubImage1D"));
         storage::CompressedTexSubImage2D.set_ptr(loadfn("glCompressedTexSubImage2D"));
         storage::CompressedTexSubImage3D.set_ptr(loadfn("glCompressedTexSubImage3D"));
         storage::CopyBufferSubData.set_ptr(loadfn("glCopyBufferSubData"));
         storage::CopyPixels.set_ptr(loadfn("glCopyPixels"));
         storage::CopyTexImage1D.set_ptr(loadfn("glCopyTexImage1D"));
         storage::CopyTexImage2D.set_ptr(loadfn("glCopyTexImage2D"));
         storage::CopyTexSubImage1D.set_ptr(loadfn("glCopyTexSubImage1D"));
         storage::CopyTexSubImage2D.set_ptr(loadfn("glCopyTexSubImage2D"));
         storage::CopyTexSubImage3D.set_ptr(loadfn("glCopyTexSubImage3D"));
         storage::CreateProgram.set_ptr(loadfn("glCreateProgram"));
         storage::CreateShader.set_ptr(loadfn("glCreateShader"));
         storage::CullFace.set_ptr(loadfn("glCullFace"));
         storage::DeleteBuffers.set_ptr(loadfn("glDeleteBuffers"));
         storage::DeleteFramebuffers.set_ptr(loadfn("glDeleteFramebuffers"));
         storage::DeleteLists.set_ptr(loadfn("glDeleteLists"));
         storage::DeleteProgram.set_ptr(loadfn("glDeleteProgram"));
         storage::DeleteQueries.set_ptr(loadfn("glDeleteQueries"));
         storage::DeleteRenderbuffers.set_ptr(loadfn("glDeleteRenderbuffers"));
         storage::DeleteSamplers.set_ptr(loadfn("glDeleteSamplers"));
         storage::DeleteShader.set_ptr(loadfn("glDeleteShader"));
         storage::DeleteSync.set_ptr(loadfn("glDeleteSync"));
         storage::DeleteTextures.set_ptr(loadfn("glDeleteTextures"));
         storage::DeleteVertexArrays.set_ptr(loadfn("glDeleteVertexArrays"));
         storage::DepthFunc.set_ptr(loadfn("glDepthFunc"));
         storage::DepthMask.set_ptr(loadfn("glDepthMask"));
         storage::DepthRange.set_ptr(loadfn("glDepthRange"));
         storage::DetachShader.set_ptr(loadfn("glDetachShader"));
         storage::Disable.set_ptr(loadfn("glDisable"));
         storage::DisableClientState.set_ptr(loadfn("glDisableClientState"));
         storage::DisableVertexAttribArray.set_ptr(loadfn("glDisableVertexAttribArray"));
         storage::Disablei.set_ptr(loadfn("glDisablei"));
         storage::DrawArrays.set_ptr(loadfn("glDrawArrays"));
         storage::DrawArraysInstanced.set_ptr(loadfn("glDrawArraysInstanced"));
         storage::DrawBuffer.set_ptr(loadfn("glDrawBuffer"));
         storage::DrawBuffers.set_ptr(loadfn("glDrawBuffers"));
         storage::DrawElements.set_ptr(loadfn("glDrawElements"));
         storage::DrawElementsBaseVertex.set_ptr(loadfn("glDrawElementsBaseVertex"));
         storage::DrawElementsInstanced.set_ptr(loadfn("glDrawElementsInstanced"));
         storage::DrawElementsInstancedBaseVertex.set_ptr(loadfn("glDrawElementsInstancedBaseVertex"));
         storage::DrawPixels.set_ptr(loadfn("glDrawPixels"));
         storage::DrawRangeElements.set_ptr(loadfn("glDrawRangeElements"));
         storage::DrawRangeElementsBaseVertex.set_ptr(loadfn("glDrawRangeElementsBaseVertex"));
         storage::EdgeFlag.set_ptr(loadfn("glEdgeFlag"));
         storage::EdgeFlagPointer.set_ptr(loadfn("glEdgeFlagPointer"));
         storage::EdgeFlagv.set_ptr(loadfn("glEdgeFlagv"));
         storage::Enable.set_ptr(loadfn("glEnable"));
         storage::EnableClientState.set_ptr(loadfn("glEnableClientState"));
         storage::EnableVertexAttribArray.set_ptr(loadfn("glEnableVertexAttribArray"));
         storage::Enablei.set_ptr(loadfn("glEnablei"));
         storage::End.set_ptr(loadfn("glEnd"));
         storage::EndConditionalRender.set_ptr(loadfn("glEndConditionalRender"));
         storage::EndList.set_ptr(loadfn("glEndList"));
         storage::EndQuery.set_ptr(loadfn("glEndQuery"));
         storage::EndTransformFeedback.set_ptr(loadfn("glEndTransformFeedback"));
         storage::EvalCoord1d.set_ptr(loadfn("glEvalCoord1d"));
         storage::EvalCoord1dv.set_ptr(loadfn("glEvalCoord1dv"));
         storage::EvalCoord1f.set_ptr(loadfn("glEvalCoord1f"));
         storage::EvalCoord1fv.set_ptr(loadfn("glEvalCoord1fv"));
         storage::EvalCoord2d.set_ptr(loadfn("glEvalCoord2d"));
         storage::EvalCoord2dv.set_ptr(loadfn("glEvalCoord2dv"));
         storage::EvalCoord2f.set_ptr(loadfn("glEvalCoord2f"));
         storage::EvalCoord2fv.set_ptr(loadfn("glEvalCoord2fv"));
         storage::EvalMesh1.set_ptr(loadfn("glEvalMesh1"));
         storage::EvalMesh2.set_ptr(loadfn("glEvalMesh2"));
         storage::EvalPoint1.set_ptr(loadfn("glEvalPoint1"));
         storage::EvalPoint2.set_ptr(loadfn("glEvalPoint2"));
         storage::FeedbackBuffer.set_ptr(loadfn("glFeedbackBuffer"));
         storage::FenceSync.set_ptr(loadfn("glFenceSync"));
         storage::Finish.set_ptr(loadfn("glFinish"));
         storage::Flush.set_ptr(loadfn("glFlush"));
         storage::FlushMappedBufferRange.set_ptr(loadfn("glFlushMappedBufferRange"));
         storage::FogCoordPointer.set_ptr(loadfn("glFogCoordPointer"));
         storage::FogCoordd.set_ptr(loadfn("glFogCoordd"));
         storage::FogCoorddv.set_ptr(loadfn("glFogCoorddv"));
         storage::FogCoordf.set_ptr(loadfn("glFogCoordf"));
         storage::FogCoordfv.set_ptr(loadfn("glFogCoordfv"));
         storage::Fogf.set_ptr(loadfn("glFogf"));
         storage::Fogfv.set_ptr(loadfn("glFogfv"));
         storage::Fogi.set_ptr(loadfn("glFogi"));
         storage::Fogiv.set_ptr(loadfn("glFogiv"));
         storage::FramebufferRenderbuffer.set_ptr(loadfn("glFramebufferRenderbuffer"));
         storage::FramebufferTexture.set_ptr(loadfn("glFramebufferTexture"));
         storage::FramebufferTexture1D.set_ptr(loadfn("glFramebufferTexture1D"));
         storage::FramebufferTexture2D.set_ptr(loadfn("glFramebufferTexture2D"));
         storage::FramebufferTexture3D.set_ptr(loadfn("glFramebufferTexture3D"));
         storage::FramebufferTextureLayer.set_ptr(loadfn("glFramebufferTextureLayer"));
         storage::FrontFace.set_ptr(loadfn("glFrontFace"));
         storage::Frustum.set_ptr(loadfn("glFrustum"));
         storage::GenBuffers.set_ptr(loadfn("glGenBuffers"));
         storage::GenFramebuffers.set_ptr(loadfn("glGenFramebuffers"));
         storage::GenLists.set_ptr(loadfn("glGenLists"));
         storage::GenQueries.set_ptr(loadfn("glGenQueries"));
         storage::GenRenderbuffers.set_ptr(loadfn("glGenRenderbuffers"));
         storage::GenSamplers.set_ptr(loadfn("glGenSamplers"));
         storage::GenTextures.set_ptr(loadfn("glGenTextures"));
         storage::GenVertexArrays.set_ptr(loadfn("glGenVertexArrays"));
         storage::GenerateMipmap.set_ptr(loadfn("glGenerateMipmap"));
         storage::GetActiveAttrib.set_ptr(loadfn("glGetActiveAttrib"));
         storage::GetActiveUniform.set_ptr(loadfn("glGetActiveUniform"));
         storage::GetActiveUniformBlockName.set_ptr(loadfn("glGetActiveUniformBlockName"));
         storage::GetActiveUniformBlockiv.set_ptr(loadfn("glGetActiveUniformBlockiv"));
         storage::GetActiveUniformName.set_ptr(loadfn("glGetActiveUniformName"));
         storage::GetActiveUniformsiv.set_ptr(loadfn("glGetActiveUniformsiv"));
         storage::GetAttachedShaders.set_ptr(loadfn("glGetAttachedShaders"));
         storage::GetAttribLocation.set_ptr(loadfn("glGetAttribLocation"));
         storage::GetBooleani_v.set_ptr(loadfn("glGetBooleani_v"));
         storage::GetBooleanv.set_ptr(loadfn("glGetBooleanv"));
         storage::GetBufferParameteri64v.set_ptr(loadfn("glGetBufferParameteri64v"));
         storage::GetBufferParameteriv.set_ptr(loadfn("glGetBufferParameteriv"));
         storage::GetBufferPointerv.set_ptr(loadfn("glGetBufferPointerv"));
         storage::GetBufferSubData.set_ptr(loadfn("glGetBufferSubData"));
         storage::GetClipPlane.set_ptr(loadfn("glGetClipPlane"));
         storage::GetCompressedTexImage.set_ptr(loadfn("glGetCompressedTexImage"));
         storage::GetDoublev.set_ptr(loadfn("glGetDoublev"));
         storage::GetError.set_ptr(loadfn("glGetError"));
         storage::GetFloatv.set_ptr(loadfn("glGetFloatv"));
         storage::GetFragDataIndex.set_ptr(loadfn("glGetFragDataIndex"));
         storage::GetFragDataLocation.set_ptr(loadfn("glGetFragDataLocation"));
         storage::GetFramebufferAttachmentParameteriv.set_ptr(loadfn("glGetFramebufferAttachmentParameteriv"));
         storage::GetInteger64i_v.set_ptr(loadfn("glGetInteger64i_v"));
         storage::GetInteger64v.set_ptr(loadfn("glGetInteger64v"));
         storage::GetIntegeri_v.set_ptr(loadfn("glGetIntegeri_v"));
         storage::GetIntegerv.set_ptr(loadfn("glGetIntegerv"));
         storage::GetLightfv.set_ptr(loadfn("glGetLightfv"));
         storage::GetLightiv.set_ptr(loadfn("glGetLightiv"));
         storage::GetMapdv.set_ptr(loadfn("glGetMapdv"));
         storage::GetMapfv.set_ptr(loadfn("glGetMapfv"));
         storage::GetMapiv.set_ptr(loadfn("glGetMapiv"));
         storage::GetMaterialfv.set_ptr(loadfn("glGetMaterialfv"));
         storage::GetMaterialiv.set_ptr(loadfn("glGetMaterialiv"));
         storage::GetMultisamplefv.set_ptr(loadfn("glGetMultisamplefv"));
         storage::GetPixelMapfv.set_ptr(loadfn("glGetPixelMapfv"));
         storage::GetPixelMapuiv.set_ptr(loadfn("glGetPixelMapuiv"));
         storage::GetPixelMapusv.set_ptr(loadfn("glGetPixelMapusv"));
         storage::GetPointerv.set_ptr(loadfn("glGetPointerv"));
         storage::GetPolygonStipple.set_ptr(loadfn("glGetPolygonStipple"));
         storage::GetProgramInfoLog.set_ptr(loadfn("glGetProgramInfoLog"));
         storage::GetProgramiv.set_ptr(loadfn("glGetProgramiv"));
         storage::GetQueryObjecti64v.set_ptr(loadfn("glGetQueryObjecti64v"));
         storage::GetQueryObjectiv.set_ptr(loadfn("glGetQueryObjectiv"));
         storage::GetQueryObjectui64v.set_ptr(loadfn("glGetQueryObjectui64v"));
         storage::GetQueryObjectuiv.set_ptr(loadfn("glGetQueryObjectuiv"));
         storage::GetQueryiv.set_ptr(loadfn("glGetQueryiv"));
         storage::GetRenderbufferParameteriv.set_ptr(loadfn("glGetRenderbufferParameteriv"));
         storage::GetSamplerParameterIiv.set_ptr(loadfn("glGetSamplerParameterIiv"));
         storage::GetSamplerParameterIuiv.set_ptr(loadfn("glGetSamplerParameterIuiv"));
         storage::GetSamplerParameterfv.set_ptr(loadfn("glGetSamplerParameterfv"));
         storage::GetSamplerParameteriv.set_ptr(loadfn("glGetSamplerParameteriv"));
         storage::GetShaderInfoLog.set_ptr(loadfn("glGetShaderInfoLog"));
         storage::GetShaderSource.set_ptr(loadfn("glGetShaderSource"));
         storage::GetShaderiv.set_ptr(loadfn("glGetShaderiv"));
         storage::GetString.set_ptr(loadfn("glGetString"));
         storage::GetStringi.set_ptr(loadfn("glGetStringi"));
         storage::GetSynciv.set_ptr(loadfn("glGetSynciv"));
         storage::GetTexEnvfv.set_ptr(loadfn("glGetTexEnvfv"));
         storage::GetTexEnviv.set_ptr(loadfn("glGetTexEnviv"));
         storage::GetTexGendv.set_ptr(loadfn("glGetTexGendv"));
         storage::GetTexGenfv.set_ptr(loadfn("glGetTexGenfv"));
         storage::GetTexGeniv.set_ptr(loadfn("glGetTexGeniv"));
         storage::GetTexImage.set_ptr(loadfn("glGetTexImage"));
         storage::GetTexLevelParameterfv.set_ptr(loadfn("glGetTexLevelParameterfv"));
         storage::GetTexLevelParameteriv.set_ptr(loadfn("glGetTexLevelParameteriv"));
         storage::GetTexParameterIiv.set_ptr(loadfn("glGetTexParameterIiv"));
         storage::GetTexParameterIuiv.set_ptr(loadfn("glGetTexParameterIuiv"));
         storage::GetTexParameterfv.set_ptr(loadfn("glGetTexParameterfv"));
         storage::GetTexParameteriv.set_ptr(loadfn("glGetTexParameteriv"));
         storage::GetTransformFeedbackVarying.set_ptr(loadfn("glGetTransformFeedbackVarying"));
         storage::GetUniformBlockIndex.set_ptr(loadfn("glGetUniformBlockIndex"));
         storage::GetUniformIndices.set_ptr(loadfn("glGetUniformIndices"));
         storage::GetUniformLocation.set_ptr(loadfn("glGetUniformLocation"));
         storage::GetUniformfv.set_ptr(loadfn("glGetUniformfv"));
         storage::GetUniformiv.set_ptr(loadfn("glGetUniformiv"));
         storage::GetUniformuiv.set_ptr(loadfn("glGetUniformuiv"));
         storage::GetVertexAttribIiv.set_ptr(loadfn("glGetVertexAttribIiv"));
         storage::GetVertexAttribIuiv.set_ptr(loadfn("glGetVertexAttribIuiv"));
         storage::GetVertexAttribPointerv.set_ptr(loadfn("glGetVertexAttribPointerv"));
         storage::GetVertexAttribdv.set_ptr(loadfn("glGetVertexAttribdv"));
         storage::GetVertexAttribfv.set_ptr(loadfn("glGetVertexAttribfv"));
         storage::GetVertexAttribiv.set_ptr(loadfn("glGetVertexAttribiv"));
         storage::Hint.set_ptr(loadfn("glHint"));
         storage::IndexMask.set_ptr(loadfn("glIndexMask"));
         storage::IndexPointer.set_ptr(loadfn("glIndexPointer"));
         storage::Indexd.set_ptr(loadfn("glIndexd"));
         storage::Indexdv.set_ptr(loadfn("glIndexdv"));
         storage::Indexf.set_ptr(loadfn("glIndexf"));
         storage::Indexfv.set_ptr(loadfn("glIndexfv"));
         storage::Indexi.set_ptr(loadfn("glIndexi"));
         storage::Indexiv.set_ptr(loadfn("glIndexiv"));
         storage::Indexs.set_ptr(loadfn("glIndexs"));
         storage::Indexsv.set_ptr(loadfn("glIndexsv"));
         storage::Indexub.set_ptr(loadfn("glIndexub"));
         storage::Indexubv.set_ptr(loadfn("glIndexubv"));
         storage::InitNames.set_ptr(loadfn("glInitNames"));
         storage::InterleavedArrays.set_ptr(loadfn("glInterleavedArrays"));
         storage::IsBuffer.set_ptr(loadfn("glIsBuffer"));
         storage::IsEnabled.set_ptr(loadfn("glIsEnabled"));
         storage::IsEnabledi.set_ptr(loadfn("glIsEnabledi"));
         storage::IsFramebuffer.set_ptr(loadfn("glIsFramebuffer"));
         storage::IsList.set_ptr(loadfn("glIsList"));
         storage::IsProgram.set_ptr(loadfn("glIsProgram"));
         storage::IsQuery.set_ptr(loadfn("glIsQuery"));
         storage::IsRenderbuffer.set_ptr(loadfn("glIsRenderbuffer"));
         storage::IsSampler.set_ptr(loadfn("glIsSampler"));
         storage::IsShader.set_ptr(loadfn("glIsShader"));
         storage::IsSync.set_ptr(loadfn("glIsSync"));
         storage::IsTexture.set_ptr(loadfn("glIsTexture"));
         storage::IsVertexArray.set_ptr(loadfn("glIsVertexArray"));
         storage::LightModelf.set_ptr(loadfn("glLightModelf"));
         storage::LightModelfv.set_ptr(loadfn("glLightModelfv"));
         storage::LightModeli.set_ptr(loadfn("glLightModeli"));
         storage::LightModeliv.set_ptr(loadfn("glLightModeliv"));
         storage::Lightf.set_ptr(loadfn("glLightf"));
         storage::Lightfv.set_ptr(loadfn("glLightfv"));
         storage::Lighti.set_ptr(loadfn("glLighti"));
         storage::Lightiv.set_ptr(loadfn("glLightiv"));
         storage::LineStipple.set_ptr(loadfn("glLineStipple"));
         storage::LineWidth.set_ptr(loadfn("glLineWidth"));
         storage::LinkProgram.set_ptr(loadfn("glLinkProgram"));
         storage::ListBase.set_ptr(loadfn("glListBase"));
         storage::LoadIdentity.set_ptr(loadfn("glLoadIdentity"));
         storage::LoadMatrixd.set_ptr(loadfn("glLoadMatrixd"));
         storage::LoadMatrixf.set_ptr(loadfn("glLoadMatrixf"));
         storage::LoadName.set_ptr(loadfn("glLoadName"));
         storage::LoadTransposeMatrixd.set_ptr(loadfn("glLoadTransposeMatrixd"));
         storage::LoadTransposeMatrixf.set_ptr(loadfn("glLoadTransposeMatrixf"));
         storage::LogicOp.set_ptr(loadfn("glLogicOp"));
         storage::Map1d.set_ptr(loadfn("glMap1d"));
         storage::Map1f.set_ptr(loadfn("glMap1f"));
         storage::Map2d.set_ptr(loadfn("glMap2d"));
         storage::Map2f.set_ptr(loadfn("glMap2f"));
         storage::MapBuffer.set_ptr(loadfn("glMapBuffer"));
         storage::MapBufferRange.set_ptr(loadfn("glMapBufferRange"));
         storage::MapGrid1d.set_ptr(loadfn("glMapGrid1d"));
         storage::MapGrid1f.set_ptr(loadfn("glMapGrid1f"));
         storage::MapGrid2d.set_ptr(loadfn("glMapGrid2d"));
         storage::MapGrid2f.set_ptr(loadfn("glMapGrid2f"));
         storage::Materialf.set_ptr(loadfn("glMaterialf"));
         storage::Materialfv.set_ptr(loadfn("glMaterialfv"));
         storage::Materiali.set_ptr(loadfn("glMateriali"));
         storage::Materialiv.set_ptr(loadfn("glMaterialiv"));
         storage::MatrixMode.set_ptr(loadfn("glMatrixMode"));
         storage::MultMatrixd.set_ptr(loadfn("glMultMatrixd"));
         storage::MultMatrixf.set_ptr(loadfn("glMultMatrixf"));
         storage::MultTransposeMatrixd.set_ptr(loadfn("glMultTransposeMatrixd"));
         storage::MultTransposeMatrixf.set_ptr(loadfn("glMultTransposeMatrixf"));
         storage::MultiDrawArrays.set_ptr(loadfn("glMultiDrawArrays"));
         storage::MultiDrawElements.set_ptr(loadfn("glMultiDrawElements"));
         storage::MultiDrawElementsBaseVertex.set_ptr(loadfn("glMultiDrawElementsBaseVertex"));
         storage::MultiTexCoord1d.set_ptr(loadfn("glMultiTexCoord1d"));
         storage::MultiTexCoord1dv.set_ptr(loadfn("glMultiTexCoord1dv"));
         storage::MultiTexCoord1f.set_ptr(loadfn("glMultiTexCoord1f"));
         storage::MultiTexCoord1fv.set_ptr(loadfn("glMultiTexCoord1fv"));
         storage::MultiTexCoord1i.set_ptr(loadfn("glMultiTexCoord1i"));
         storage::MultiTexCoord1iv.set_ptr(loadfn("glMultiTexCoord1iv"));
         storage::MultiTexCoord1s.set_ptr(loadfn("glMultiTexCoord1s"));
         storage::MultiTexCoord1sv.set_ptr(loadfn("glMultiTexCoord1sv"));
         storage::MultiTexCoord2d.set_ptr(loadfn("glMultiTexCoord2d"));
         storage::MultiTexCoord2dv.set_ptr(loadfn("glMultiTexCoord2dv"));
         storage::MultiTexCoord2f.set_ptr(loadfn("glMultiTexCoord2f"));
         storage::MultiTexCoord2fv.set_ptr(loadfn("glMultiTexCoord2fv"));
         storage::MultiTexCoord2i.set_ptr(loadfn("glMultiTexCoord2i"));
         storage::MultiTexCoord2iv.set_ptr(loadfn("glMultiTexCoord2iv"));
         storage::MultiTexCoord2s.set_ptr(loadfn("glMultiTexCoord2s"));
         storage::MultiTexCoord2sv.set_ptr(loadfn("glMultiTexCoord2sv"));
         storage::MultiTexCoord3d.set_ptr(loadfn("glMultiTexCoord3d"));
         storage::MultiTexCoord3dv.set_ptr(loadfn("glMultiTexCoord3dv"));
         storage::MultiTexCoord3f.set_ptr(loadfn("glMultiTexCoord3f"));
         storage::MultiTexCoord3fv.set_ptr(loadfn("glMultiTexCoord3fv"));
         storage::MultiTexCoord3i.set_ptr(loadfn("glMultiTexCoord3i"));
         storage::MultiTexCoord3iv.set_ptr(loadfn("glMultiTexCoord3iv"));
         storage::MultiTexCoord3s.set_ptr(loadfn("glMultiTexCoord3s"));
         storage::MultiTexCoord3sv.set_ptr(loadfn("glMultiTexCoord3sv"));
         storage::MultiTexCoord4d.set_ptr(loadfn("glMultiTexCoord4d"));
         storage::MultiTexCoord4dv.set_ptr(loadfn("glMultiTexCoord4dv"));
         storage::MultiTexCoord4f.set_ptr(loadfn("glMultiTexCoord4f"));
         storage::MultiTexCoord4fv.set_ptr(loadfn("glMultiTexCoord4fv"));
         storage::MultiTexCoord4i.set_ptr(loadfn("glMultiTexCoord4i"));
         storage::MultiTexCoord4iv.set_ptr(loadfn("glMultiTexCoord4iv"));
         storage::MultiTexCoord4s.set_ptr(loadfn("glMultiTexCoord4s"));
         storage::MultiTexCoord4sv.set_ptr(loadfn("glMultiTexCoord4sv"));
         storage::MultiTexCoordP1ui.set_ptr(loadfn("glMultiTexCoordP1ui"));
         storage::MultiTexCoordP1uiv.set_ptr(loadfn("glMultiTexCoordP1uiv"));
         storage::MultiTexCoordP2ui.set_ptr(loadfn("glMultiTexCoordP2ui"));
         storage::MultiTexCoordP2uiv.set_ptr(loadfn("glMultiTexCoordP2uiv"));
         storage::MultiTexCoordP3ui.set_ptr(loadfn("glMultiTexCoordP3ui"));
         storage::MultiTexCoordP3uiv.set_ptr(loadfn("glMultiTexCoordP3uiv"));
         storage::MultiTexCoordP4ui.set_ptr(loadfn("glMultiTexCoordP4ui"));
         storage::MultiTexCoordP4uiv.set_ptr(loadfn("glMultiTexCoordP4uiv"));
         storage::NewList.set_ptr(loadfn("glNewList"));
         storage::Normal3b.set_ptr(loadfn("glNormal3b"));
         storage::Normal3bv.set_ptr(loadfn("glNormal3bv"));
         storage::Normal3d.set_ptr(loadfn("glNormal3d"));
         storage::Normal3dv.set_ptr(loadfn("glNormal3dv"));
         storage::Normal3f.set_ptr(loadfn("glNormal3f"));
         storage::Normal3fv.set_ptr(loadfn("glNormal3fv"));
         storage::Normal3i.set_ptr(loadfn("glNormal3i"));
         storage::Normal3iv.set_ptr(loadfn("glNormal3iv"));
         storage::Normal3s.set_ptr(loadfn("glNormal3s"));
         storage::Normal3sv.set_ptr(loadfn("glNormal3sv"));
         storage::NormalP3ui.set_ptr(loadfn("glNormalP3ui"));
         storage::NormalP3uiv.set_ptr(loadfn("glNormalP3uiv"));
         storage::NormalPointer.set_ptr(loadfn("glNormalPointer"));
         storage::Ortho.set_ptr(loadfn("glOrtho"));
         storage::PassThrough.set_ptr(loadfn("glPassThrough"));
         storage::PixelMapfv.set_ptr(loadfn("glPixelMapfv"));
         storage::PixelMapuiv.set_ptr(loadfn("glPixelMapuiv"));
         storage::PixelMapusv.set_ptr(loadfn("glPixelMapusv"));
         storage::PixelStoref.set_ptr(loadfn("glPixelStoref"));
         storage::PixelStorei.set_ptr(loadfn("glPixelStorei"));
         storage::PixelTransferf.set_ptr(loadfn("glPixelTransferf"));
         storage::PixelTransferi.set_ptr(loadfn("glPixelTransferi"));
         storage::PixelZoom.set_ptr(loadfn("glPixelZoom"));
         storage::PointParameterf.set_ptr(loadfn("glPointParameterf"));
         storage::PointParameterfv.set_ptr(loadfn("glPointParameterfv"));
         storage::PointParameteri.set_ptr(loadfn("glPointParameteri"));
         storage::PointParameteriv.set_ptr(loadfn("glPointParameteriv"));
         storage::PointSize.set_ptr(loadfn("glPointSize"));
         storage::PolygonMode.set_ptr(loadfn("glPolygonMode"));
         storage::PolygonOffset.set_ptr(loadfn("glPolygonOffset"));
         storage::PolygonStipple.set_ptr(loadfn("glPolygonStipple"));
         storage::PopAttrib.set_ptr(loadfn("glPopAttrib"));
         storage::PopClientAttrib.set_ptr(loadfn("glPopClientAttrib"));
         storage::PopMatrix.set_ptr(loadfn("glPopMatrix"));
         storage::PopName.set_ptr(loadfn("glPopName"));
         storage::PrimitiveRestartIndex.set_ptr(loadfn("glPrimitiveRestartIndex"));
         storage::PrioritizeTextures.set_ptr(loadfn("glPrioritizeTextures"));
         storage::ProvokingVertex.set_ptr(loadfn("glProvokingVertex"));
         storage::PushAttrib.set_ptr(loadfn("glPushAttrib"));
         storage::PushClientAttrib.set_ptr(loadfn("glPushClientAttrib"));
         storage::PushMatrix.set_ptr(loadfn("glPushMatrix"));
         storage::PushName.set_ptr(loadfn("glPushName"));
         storage::QueryCounter.set_ptr(loadfn("glQueryCounter"));
         storage::RasterPos2d.set_ptr(loadfn("glRasterPos2d"));
         storage::RasterPos2dv.set_ptr(loadfn("glRasterPos2dv"));
         storage::RasterPos2f.set_ptr(loadfn("glRasterPos2f"));
         storage::RasterPos2fv.set_ptr(loadfn("glRasterPos2fv"));
         storage::RasterPos2i.set_ptr(loadfn("glRasterPos2i"));
         storage::RasterPos2iv.set_ptr(loadfn("glRasterPos2iv"));
         storage::RasterPos2s.set_ptr(loadfn("glRasterPos2s"));
         storage::RasterPos2sv.set_ptr(loadfn("glRasterPos2sv"));
         storage::RasterPos3d.set_ptr(loadfn("glRasterPos3d"));
         storage::RasterPos3dv.set_ptr(loadfn("glRasterPos3dv"));
         storage::RasterPos3f.set_ptr(loadfn("glRasterPos3f"));
         storage::RasterPos3fv.set_ptr(loadfn("glRasterPos3fv"));
         storage::RasterPos3i.set_ptr(loadfn("glRasterPos3i"));
         storage::RasterPos3iv.set_ptr(loadfn("glRasterPos3iv"));
         storage::RasterPos3s.set_ptr(loadfn("glRasterPos3s"));
         storage::RasterPos3sv.set_ptr(loadfn("glRasterPos3sv"));
         storage::RasterPos4d.set_ptr(loadfn("glRasterPos4d"));
         storage::RasterPos4dv.set_ptr(loadfn("glRasterPos4dv"));
         storage::RasterPos4f.set_ptr(loadfn("glRasterPos4f"));
         storage::RasterPos4fv.set_ptr(loadfn("glRasterPos4fv"));
         storage::RasterPos4i.set_ptr(loadfn("glRasterPos4i"));
         storage::RasterPos4iv.set_ptr(loadfn("glRasterPos4iv"));
         storage::RasterPos4s.set_ptr(loadfn("glRasterPos4s"));
         storage::RasterPos4sv.set_ptr(loadfn("glRasterPos4sv"));
         storage::ReadBuffer.set_ptr(loadfn("glReadBuffer"));
         storage::ReadPixels.set_ptr(loadfn("glReadPixels"));
         storage::Rectd.set_ptr(loadfn("glRectd"));
         storage::Rectdv.set_ptr(loadfn("glRectdv"));
         storage::Rectf.set_ptr(loadfn("glRectf"));
         storage::Rectfv.set_ptr(loadfn("glRectfv"));
         storage::Recti.set_ptr(loadfn("glRecti"));
         storage::Rectiv.set_ptr(loadfn("glRectiv"));
         storage::Rects.set_ptr(loadfn("glRects"));
         storage::Rectsv.set_ptr(loadfn("glRectsv"));
         storage::RenderMode.set_ptr(loadfn("glRenderMode"));
         storage::RenderbufferStorage.set_ptr(loadfn("glRenderbufferStorage"));
         storage::RenderbufferStorageMultisample.set_ptr(loadfn("glRenderbufferStorageMultisample"));
         storage::Rotated.set_ptr(loadfn("glRotated"));
         storage::Rotatef.set_ptr(loadfn("glRotatef"));
         storage::SampleCoverage.set_ptr(loadfn("glSampleCoverage"));
         storage::SampleMaski.set_ptr(loadfn("glSampleMaski"));
         storage::SamplerParameterIiv.set_ptr(loadfn("glSamplerParameterIiv"));
         storage::SamplerParameterIuiv.set_ptr(loadfn("glSamplerParameterIuiv"));
         storage::SamplerParameterf.set_ptr(loadfn("glSamplerParameterf"));
         storage::SamplerParameterfv.set_ptr(loadfn("glSamplerParameterfv"));
         storage::SamplerParameteri.set_ptr(loadfn("glSamplerParameteri"));
         storage::SamplerParameteriv.set_ptr(loadfn("glSamplerParameteriv"));
         storage::Scaled.set_ptr(loadfn("glScaled"));
         storage::Scalef.set_ptr(loadfn("glScalef"));
         storage::Scissor.set_ptr(loadfn("glScissor"));
         storage::SecondaryColor3b.set_ptr(loadfn("glSecondaryColor3b"));
         storage::SecondaryColor3bv.set_ptr(loadfn("glSecondaryColor3bv"));
         storage::SecondaryColor3d.set_ptr(loadfn("glSecondaryColor3d"));
         storage::SecondaryColor3dv.set_ptr(loadfn("glSecondaryColor3dv"));
         storage::SecondaryColor3f.set_ptr(loadfn("glSecondaryColor3f"));
         storage::SecondaryColor3fv.set_ptr(loadfn("glSecondaryColor3fv"));
         storage::SecondaryColor3i.set_ptr(loadfn("glSecondaryColor3i"));
         storage::SecondaryColor3iv.set_ptr(loadfn("glSecondaryColor3iv"));
         storage::SecondaryColor3s.set_ptr(loadfn("glSecondaryColor3s"));
         storage::SecondaryColor3sv.set_ptr(loadfn("glSecondaryColor3sv"));
         storage::SecondaryColor3ub.set_ptr(loadfn("glSecondaryColor3ub"));
         storage::SecondaryColor3ubv.set_ptr(loadfn("glSecondaryColor3ubv"));
         storage::SecondaryColor3ui.set_ptr(loadfn("glSecondaryColor3ui"));
         storage::SecondaryColor3uiv.set_ptr(loadfn("glSecondaryColor3uiv"));
         storage::SecondaryColor3us.set_ptr(loadfn("glSecondaryColor3us"));
         storage::SecondaryColor3usv.set_ptr(loadfn("glSecondaryColor3usv"));
         storage::SecondaryColorP3ui.set_ptr(loadfn("glSecondaryColorP3ui"));
         storage::SecondaryColorP3uiv.set_ptr(loadfn("glSecondaryColorP3uiv"));
         storage::SecondaryColorPointer.set_ptr(loadfn("glSecondaryColorPointer"));
         storage::SelectBuffer.set_ptr(loadfn("glSelectBuffer"));
         storage::ShadeModel.set_ptr(loadfn("glShadeModel"));
         storage::ShaderSource.set_ptr(loadfn("glShaderSource"));
         storage::StencilFunc.set_ptr(loadfn("glStencilFunc"));
         storage::StencilFuncSeparate.set_ptr(loadfn("glStencilFuncSeparate"));
         storage::StencilMask.set_ptr(loadfn("glStencilMask"));
         storage::StencilMaskSeparate.set_ptr(loadfn("glStencilMaskSeparate"));
         storage::StencilOp.set_ptr(loadfn("glStencilOp"));
         storage::StencilOpSeparate.set_ptr(loadfn("glStencilOpSeparate"));
         storage::TexBuffer.set_ptr(loadfn("glTexBuffer"));
         storage::TexCoord1d.set_ptr(loadfn("glTexCoord1d"));
         storage::TexCoord1dv.set_ptr(loadfn("glTexCoord1dv"));
         storage::TexCoord1f.set_ptr(loadfn("glTexCoord1f"));
         storage::TexCoord1fv.set_ptr(loadfn("glTexCoord1fv"));
         storage::TexCoord1i.set_ptr(loadfn("glTexCoord1i"));
         storage::TexCoord1iv.set_ptr(loadfn("glTexCoord1iv"));
         storage::TexCoord1s.set_ptr(loadfn("glTexCoord1s"));
         storage::TexCoord1sv.set_ptr(loadfn("glTexCoord1sv"));
         storage::TexCoord2d.set_ptr(loadfn("glTexCoord2d"));
         storage::TexCoord2dv.set_ptr(loadfn("glTexCoord2dv"));
         storage::TexCoord2f.set_ptr(loadfn("glTexCoord2f"));
         storage::TexCoord2fv.set_ptr(loadfn("glTexCoord2fv"));
         storage::TexCoord2i.set_ptr(loadfn("glTexCoord2i"));
         storage::TexCoord2iv.set_ptr(loadfn("glTexCoord2iv"));
         storage::TexCoord2s.set_ptr(loadfn("glTexCoord2s"));
         storage::TexCoord2sv.set_ptr(loadfn("glTexCoord2sv"));
         storage::TexCoord3d.set_ptr(loadfn("glTexCoord3d"));
         storage::TexCoord3dv.set_ptr(loadfn("glTexCoord3dv"));
         storage::TexCoord3f.set_ptr(loadfn("glTexCoord3f"));
         storage::TexCoord3fv.set_ptr(loadfn("glTexCoord3fv"));
         storage::TexCoord3i.set_ptr(loadfn("glTexCoord3i"));
         storage::TexCoord3iv.set_ptr(loadfn("glTexCoord3iv"));
         storage::TexCoord3s.set_ptr(loadfn("glTexCoord3s"));
         storage::TexCoord3sv.set_ptr(loadfn("glTexCoord3sv"));
         storage::TexCoord4d.set_ptr(loadfn("glTexCoord4d"));
         storage::TexCoord4dv.set_ptr(loadfn("glTexCoord4dv"));
         storage::TexCoord4f.set_ptr(loadfn("glTexCoord4f"));
         storage::TexCoord4fv.set_ptr(loadfn("glTexCoord4fv"));
         storage::TexCoord4i.set_ptr(loadfn("glTexCoord4i"));
         storage::TexCoord4iv.set_ptr(loadfn("glTexCoord4iv"));
         storage::TexCoord4s.set_ptr(loadfn("glTexCoord4s"));
         storage::TexCoord4sv.set_ptr(loadfn("glTexCoord4sv"));
         storage::TexCoordP1ui.set_ptr(loadfn("glTexCoordP1ui"));
         storage::TexCoordP1uiv.set_ptr(loadfn("glTexCoordP1uiv"));
         storage::TexCoordP2ui.set_ptr(loadfn("glTexCoordP2ui"));
         storage::TexCoordP2uiv.set_ptr(loadfn("glTexCoordP2uiv"));
         storage::TexCoordP3ui.set_ptr(loadfn("glTexCoordP3ui"));
         storage::TexCoordP3uiv.set_ptr(loadfn("glTexCoordP3uiv"));
         storage::TexCoordP4ui.set_ptr(loadfn("glTexCoordP4ui"));
         storage::TexCoordP4uiv.set_ptr(loadfn("glTexCoordP4uiv"));
         storage::TexCoordPointer.set_ptr(loadfn("glTexCoordPointer"));
         storage::TexEnvf.set_ptr(loadfn("glTexEnvf"));
         storage::TexEnvfv.set_ptr(loadfn("glTexEnvfv"));
         storage::TexEnvi.set_ptr(loadfn("glTexEnvi"));
         storage::TexEnviv.set_ptr(loadfn("glTexEnviv"));
         storage::TexGend.set_ptr(loadfn("glTexGend"));
         storage::TexGendv.set_ptr(loadfn("glTexGendv"));
         storage::TexGenf.set_ptr(loadfn("glTexGenf"));
         storage::TexGenfv.set_ptr(loadfn("glTexGenfv"));
         storage::TexGeni.set_ptr(loadfn("glTexGeni"));
         storage::TexGeniv.set_ptr(loadfn("glTexGeniv"));
         storage::TexImage1D.set_ptr(loadfn("glTexImage1D"));
         storage::TexImage2D.set_ptr(loadfn("glTexImage2D"));
         storage::TexImage2DMultisample.set_ptr(loadfn("glTexImage2DMultisample"));
         storage::TexImage3D.set_ptr(loadfn("glTexImage3D"));
         storage::TexImage3DMultisample.set_ptr(loadfn("glTexImage3DMultisample"));
         storage::TexParameterIiv.set_ptr(loadfn("glTexParameterIiv"));
         storage::TexParameterIuiv.set_ptr(loadfn("glTexParameterIuiv"));
         storage::TexParameterf.set_ptr(loadfn("glTexParameterf"));
         storage::TexParameterfv.set_ptr(loadfn("glTexParameterfv"));
         storage::TexParameteri.set_ptr(loadfn("glTexParameteri"));
         storage::TexParameteriv.set_ptr(loadfn("glTexParameteriv"));
         storage::TexSubImage1D.set_ptr(loadfn("glTexSubImage1D"));
         storage::TexSubImage2D.set_ptr(loadfn("glTexSubImage2D"));
         storage::TexSubImage3D.set_ptr(loadfn("glTexSubImage3D"));
         storage::TransformFeedbackVaryings.set_ptr(loadfn("glTransformFeedbackVaryings"));
         storage::Translated.set_ptr(loadfn("glTranslated"));
         storage::Translatef.set_ptr(loadfn("glTranslatef"));
         storage::Uniform1f.set_ptr(loadfn("glUniform1f"));
         storage::Uniform1fv.set_ptr(loadfn("glUniform1fv"));
         storage::Uniform1i.set_ptr(loadfn("glUniform1i"));
         storage::Uniform1iv.set_ptr(loadfn("glUniform1iv"));
         storage::Uniform1ui.set_ptr(loadfn("glUniform1ui"));
         storage::Uniform1uiv.set_ptr(loadfn("glUniform1uiv"));
         storage::Uniform2f.set_ptr(loadfn("glUniform2f"));
         storage::Uniform2fv.set_ptr(loadfn("glUniform2fv"));
         storage::Uniform2i.set_ptr(loadfn("glUniform2i"));
         storage::Uniform2iv.set_ptr(loadfn("glUniform2iv"));
         storage::Uniform2ui.set_ptr(loadfn("glUniform2ui"));
         storage::Uniform2uiv.set_ptr(loadfn("glUniform2uiv"));
         storage::Uniform3f.set_ptr(loadfn("glUniform3f"));
         storage::Uniform3fv.set_ptr(loadfn("glUniform3fv"));
         storage::Uniform3i.set_ptr(loadfn("glUniform3i"));
         storage::Uniform3iv.set_ptr(loadfn("glUniform3iv"));
         storage::Uniform3ui.set_ptr(loadfn("glUniform3ui"));
         storage::Uniform3uiv.set_ptr(loadfn("glUniform3uiv"));
         storage::Uniform4f.set_ptr(loadfn("glUniform4f"));
         storage::Uniform4fv.set_ptr(loadfn("glUniform4fv"));
         storage::Uniform4i.set_ptr(loadfn("glUniform4i"));
         storage::Uniform4iv.set_ptr(loadfn("glUniform4iv"));
         storage::Uniform4ui.set_ptr(loadfn("glUniform4ui"));
         storage::Uniform4uiv.set_ptr(loadfn("glUniform4uiv"));
         storage::UniformBlockBinding.set_ptr(loadfn("glUniformBlockBinding"));
         storage::UniformMatrix2fv.set_ptr(loadfn("glUniformMatrix2fv"));
         storage::UniformMatrix2x3fv.set_ptr(loadfn("glUniformMatrix2x3fv"));
         storage::UniformMatrix2x4fv.set_ptr(loadfn("glUniformMatrix2x4fv"));
         storage::UniformMatrix3fv.set_ptr(loadfn("glUniformMatrix3fv"));
         storage::UniformMatrix3x2fv.set_ptr(loadfn("glUniformMatrix3x2fv"));
         storage::UniformMatrix3x4fv.set_ptr(loadfn("glUniformMatrix3x4fv"));
         storage::UniformMatrix4fv.set_ptr(loadfn("glUniformMatrix4fv"));
         storage::UniformMatrix4x2fv.set_ptr(loadfn("glUniformMatrix4x2fv"));
         storage::UniformMatrix4x3fv.set_ptr(loadfn("glUniformMatrix4x3fv"));
         storage::UnmapBuffer.set_ptr(loadfn("glUnmapBuffer"));
         storage::UseProgram.set_ptr(loadfn("glUseProgram"));
         storage::ValidateProgram.set_ptr(loadfn("glValidateProgram"));
         storage::Vertex2d.set_ptr(loadfn("glVertex2d"));
         storage::Vertex2dv.set_ptr(loadfn("glVertex2dv"));
         storage::Vertex2f.set_ptr(loadfn("glVertex2f"));
         storage::Vertex2fv.set_ptr(loadfn("glVertex2fv"));
         storage::Vertex2i.set_ptr(loadfn("glVertex2i"));
         storage::Vertex2iv.set_ptr(loadfn("glVertex2iv"));
         storage::Vertex2s.set_ptr(loadfn("glVertex2s"));
         storage::Vertex2sv.set_ptr(loadfn("glVertex2sv"));
         storage::Vertex3d.set_ptr(loadfn("glVertex3d"));
         storage::Vertex3dv.set_ptr(loadfn("glVertex3dv"));
         storage::Vertex3f.set_ptr(loadfn("glVertex3f"));
         storage::Vertex3fv.set_ptr(loadfn("glVertex3fv"));
         storage::Vertex3i.set_ptr(loadfn("glVertex3i"));
         storage::Vertex3iv.set_ptr(loadfn("glVertex3iv"));
         storage::Vertex3s.set_ptr(loadfn("glVertex3s"));
         storage::Vertex3sv.set_ptr(loadfn("glVertex3sv"));
         storage::Vertex4d.set_ptr(loadfn("glVertex4d"));
         storage::Vertex4dv.set_ptr(loadfn("glVertex4dv"));
         storage::Vertex4f.set_ptr(loadfn("glVertex4f"));
         storage::Vertex4fv.set_ptr(loadfn("glVertex4fv"));
         storage::Vertex4i.set_ptr(loadfn("glVertex4i"));
         storage::Vertex4iv.set_ptr(loadfn("glVertex4iv"));
         storage::Vertex4s.set_ptr(loadfn("glVertex4s"));
         storage::Vertex4sv.set_ptr(loadfn("glVertex4sv"));
         storage::VertexAttrib1d.set_ptr(loadfn("glVertexAttrib1d"));
         storage::VertexAttrib1dv.set_ptr(loadfn("glVertexAttrib1dv"));
         storage::VertexAttrib1f.set_ptr(loadfn("glVertexAttrib1f"));
         storage::VertexAttrib1fv.set_ptr(loadfn("glVertexAttrib1fv"));
         storage::VertexAttrib1s.set_ptr(loadfn("glVertexAttrib1s"));
         storage::VertexAttrib1sv.set_ptr(loadfn("glVertexAttrib1sv"));
         storage::VertexAttrib2d.set_ptr(loadfn("glVertexAttrib2d"));
         storage::VertexAttrib2dv.set_ptr(loadfn("glVertexAttrib2dv"));
         storage::VertexAttrib2f.set_ptr(loadfn("glVertexAttrib2f"));
         storage::VertexAttrib2fv.set_ptr(loadfn("glVertexAttrib2fv"));
         storage::VertexAttrib2s.set_ptr(loadfn("glVertexAttrib2s"));
         storage::VertexAttrib2sv.set_ptr(loadfn("glVertexAttrib2sv"));
         storage::VertexAttrib3d.set_ptr(loadfn("glVertexAttrib3d"));
         storage::VertexAttrib3dv.set_ptr(loadfn("glVertexAttrib3dv"));
         storage::VertexAttrib3f.set_ptr(loadfn("glVertexAttrib3f"));
         storage::VertexAttrib3fv.set_ptr(loadfn("glVertexAttrib3fv"));
         storage::VertexAttrib3s.set_ptr(loadfn("glVertexAttrib3s"));
         storage::VertexAttrib3sv.set_ptr(loadfn("glVertexAttrib3sv"));
         storage::VertexAttrib4Nbv.set_ptr(loadfn("glVertexAttrib4Nbv"));
         storage::VertexAttrib4Niv.set_ptr(loadfn("glVertexAttrib4Niv"));
         storage::VertexAttrib4Nsv.set_ptr(loadfn("glVertexAttrib4Nsv"));
         storage::VertexAttrib4Nub.set_ptr(loadfn("glVertexAttrib4Nub"));
         storage::VertexAttrib4Nubv.set_ptr(loadfn("glVertexAttrib4Nubv"));
         storage::VertexAttrib4Nuiv.set_ptr(loadfn("glVertexAttrib4Nuiv"));
         storage::VertexAttrib4Nusv.set_ptr(loadfn("glVertexAttrib4Nusv"));
         storage::VertexAttrib4bv.set_ptr(loadfn("glVertexAttrib4bv"));
         storage::VertexAttrib4d.set_ptr(loadfn("glVertexAttrib4d"));
         storage::VertexAttrib4dv.set_ptr(loadfn("glVertexAttrib4dv"));
         storage::VertexAttrib4f.set_ptr(loadfn("glVertexAttrib4f"));
         storage::VertexAttrib4fv.set_ptr(loadfn("glVertexAttrib4fv"));
         storage::VertexAttrib4iv.set_ptr(loadfn("glVertexAttrib4iv"));
         storage::VertexAttrib4s.set_ptr(loadfn("glVertexAttrib4s"));
         storage::VertexAttrib4sv.set_ptr(loadfn("glVertexAttrib4sv"));
         storage::VertexAttrib4ubv.set_ptr(loadfn("glVertexAttrib4ubv"));
         storage::VertexAttrib4uiv.set_ptr(loadfn("glVertexAttrib4uiv"));
         storage::VertexAttrib4usv.set_ptr(loadfn("glVertexAttrib4usv"));
         storage::VertexAttribDivisor.set_ptr(loadfn("glVertexAttribDivisor"));
         storage::VertexAttribI1i.set_ptr(loadfn("glVertexAttribI1i"));
         storage::VertexAttribI1iv.set_ptr(loadfn("glVertexAttribI1iv"));
         storage::VertexAttribI1ui.set_ptr(loadfn("glVertexAttribI1ui"));
         storage::VertexAttribI1uiv.set_ptr(loadfn("glVertexAttribI1uiv"));
         storage::VertexAttribI2i.set_ptr(loadfn("glVertexAttribI2i"));
         storage::VertexAttribI2iv.set_ptr(loadfn("glVertexAttribI2iv"));
         storage::VertexAttribI2ui.set_ptr(loadfn("glVertexAttribI2ui"));
         storage::VertexAttribI2uiv.set_ptr(loadfn("glVertexAttribI2uiv"));
         storage::VertexAttribI3i.set_ptr(loadfn("glVertexAttribI3i"));
         storage::VertexAttribI3iv.set_ptr(loadfn("glVertexAttribI3iv"));
         storage::VertexAttribI3ui.set_ptr(loadfn("glVertexAttribI3ui"));
         storage::VertexAttribI3uiv.set_ptr(loadfn("glVertexAttribI3uiv"));
         storage::VertexAttribI4bv.set_ptr(loadfn("glVertexAttribI4bv"));
         storage::VertexAttribI4i.set_ptr(loadfn("glVertexAttribI4i"));
         storage::VertexAttribI4iv.set_ptr(loadfn("glVertexAttribI4iv"));
         storage::VertexAttribI4sv.set_ptr(loadfn("glVertexAttribI4sv"));
         storage::VertexAttribI4ubv.set_ptr(loadfn("glVertexAttribI4ubv"));
         storage::VertexAttribI4ui.set_ptr(loadfn("glVertexAttribI4ui"));
         storage::VertexAttribI4uiv.set_ptr(loadfn("glVertexAttribI4uiv"));
         storage::VertexAttribI4usv.set_ptr(loadfn("glVertexAttribI4usv"));
         storage::VertexAttribIPointer.set_ptr(loadfn("glVertexAttribIPointer"));
         storage::VertexAttribP1ui.set_ptr(loadfn("glVertexAttribP1ui"));
         storage::VertexAttribP1uiv.set_ptr(loadfn("glVertexAttribP1uiv"));
         storage::VertexAttribP2ui.set_ptr(loadfn("glVertexAttribP2ui"));
         storage::VertexAttribP2uiv.set_ptr(loadfn("glVertexAttribP2uiv"));
         storage::VertexAttribP3ui.set_ptr(loadfn("glVertexAttribP3ui"));
         storage::VertexAttribP3uiv.set_ptr(loadfn("glVertexAttribP3uiv"));
         storage::VertexAttribP4ui.set_ptr(loadfn("glVertexAttribP4ui"));
         storage::VertexAttribP4uiv.set_ptr(loadfn("glVertexAttribP4uiv"));
         storage::VertexAttribPointer.set_ptr(loadfn("glVertexAttribPointer"));
         storage::VertexP2ui.set_ptr(loadfn("glVertexP2ui"));
         storage::VertexP2uiv.set_ptr(loadfn("glVertexP2uiv"));
         storage::VertexP3ui.set_ptr(loadfn("glVertexP3ui"));
         storage::VertexP3uiv.set_ptr(loadfn("glVertexP3uiv"));
         storage::VertexP4ui.set_ptr(loadfn("glVertexP4ui"));
         storage::VertexP4uiv.set_ptr(loadfn("glVertexP4uiv"));
         storage::VertexPointer.set_ptr(loadfn("glVertexPointer"));
         storage::Viewport.set_ptr(loadfn("glViewport"));
         storage::WaitSync.set_ptr(loadfn("glWaitSync"));
         storage::WindowPos2d.set_ptr(loadfn("glWindowPos2d"));
         storage::WindowPos2dv.set_ptr(loadfn("glWindowPos2dv"));
         storage::WindowPos2f.set_ptr(loadfn("glWindowPos2f"));
         storage::WindowPos2fv.set_ptr(loadfn("glWindowPos2fv"));
         storage::WindowPos2i.set_ptr(loadfn("glWindowPos2i"));
         storage::WindowPos2iv.set_ptr(loadfn("glWindowPos2iv"));
         storage::WindowPos2s.set_ptr(loadfn("glWindowPos2s"));
         storage::WindowPos2sv.set_ptr(loadfn("glWindowPos2sv"));
         storage::WindowPos3d.set_ptr(loadfn("glWindowPos3d"));
         storage::WindowPos3dv.set_ptr(loadfn("glWindowPos3dv"));
         storage::WindowPos3f.set_ptr(loadfn("glWindowPos3f"));
         storage::WindowPos3fv.set_ptr(loadfn("glWindowPos3fv"));
         storage::WindowPos3i.set_ptr(loadfn("glWindowPos3i"));
         storage::WindowPos3iv.set_ptr(loadfn("glWindowPos3iv"));
         storage::WindowPos3s.set_ptr(loadfn("glWindowPos3s"));
         storage::WindowPos3sv.set_ptr(loadfn("glWindowPos3sv"));

    }
}

